using UnityEngine;
using UnityEngine.InputSystem;
using AnimalRevolt.UI;

namespace AnimalRevolt.Camera
{
    /// <summary>
    /// Camera ƒë·ªÉ quan s√°t NPC t·ª´ xa v·ªõi t√≠nh nƒÉng zoom v√† xoay
    /// S·ª≠ d·ª•ng chung parameters t·ª´ DieuChinhThongSoCamera
    /// </summary>
    public class NPCCamera : MonoBehaviour
    {
        [Header("üéØ Target Settings")]
        [SerializeField, Tooltip("NPC c·∫ßn quan s√°t")]
        private Transform mucTieuNPC;
        
        [SerializeField, Tooltip("T·ª± ƒë·ªông t√¨m NPC g·∫ßn nh·∫•t")]
        private bool tuDongTimNPC = true;

        [Header("üìè Distance & Position")]
        [SerializeField, Tooltip("Kho·∫£ng c√°ch t·ª´ NPC")]
        private float khoangCach = 5f;
        
        [SerializeField, Tooltip("ƒê·ªô cao so v·ªõi NPC")]
        private float doCao = 2f;
        
        [SerializeField, Tooltip("Offset v·ªã tr√≠ camera")]
        private Vector3 offsetViTri = Vector3.zero;

        [Header("üéÆ Controls")]
        [SerializeField, Tooltip("T·ªëc ƒë·ªô xoay camera")]
        private float tocDoXoay = 120f;
        
        [SerializeField, Tooltip("ƒê·ªô nh·∫°y chu·ªôt")]
        private float doNhayChuot = 2f;
        
        [SerializeField, Tooltip("Nh√¢n t·ªëc ƒë·ªô khi gi·ªØ Shift")]
        private float nhanTocDoNhanh = 2f;
        
        [SerializeField, Tooltip("T·ªëc ƒë·ªô zoom")]
        private float tocDoZoom = 2f;
        
        [SerializeField, Tooltip("Gi·ªõi h·∫°n zoom (min, max)")]
        private Vector2 gioiHanZoom = new Vector2(2f, 15f);

        [Header("‚öôÔ∏è Advanced Settings")]
        [SerializeField, Tooltip("L√†m m·ªÅm chuy·ªÉn ƒë·ªông")]
        private float doDaiLamMem = 0.1f;
        
        [SerializeField, Tooltip("T·ª± ƒë·ªông focus v√†o NPC")]
        private bool tuDongFocus = true;
        
        [SerializeField, Tooltip("S·ª≠ d·ª•ng shared parameters")]
        private bool suDungSharedParameters = true;

        // Bi·∫øn qu·∫£n l√Ω
        private UnityEngine.Camera cameraNPC;
        private float gocXoayX = 0f;
        private float gocXoayY = 0f;
        private float khoangCachHienTai;
        private Vector3 vanTocLamMem;

        // Shared parameters reference
        private CameraSettingsUI cameraSettingsUI;

        private void Start()
        {
            KhoiTaoCamera();
        }

        private void Update()
        {
            if (cameraNPC != null && cameraNPC.enabled)
            {
                CapNhatSharedParameters();
                XuLyDieuKhienCamera();
                CapNhatViTriCamera();
            }
        }

        /// <summary>
        /// Kh·ªüi t·∫°o camera v√† c√°c th√¥ng s·ªë
        /// </summary>
        private void KhoiTaoCamera()
        {
            // L·∫•y camera component
            cameraNPC = GetComponent<UnityEngine.Camera>();
            if (cameraNPC == null)
            {
                cameraNPC = gameObject.AddComponent<UnityEngine.Camera>();
            }

            // T·∫Øt camera ban ƒë·∫ßu
            cameraNPC.enabled = false;

            // Kh·ªüi t·∫°o kho·∫£ng c√°ch
            khoangCachHienTai = khoangCach;

            // T·ª± ƒë·ªông t√¨m NPC n·∫øu c·∫ßn
            if (tuDongTimNPC && mucTieuNPC == null)
            {
                TimNPCGanNhat();
            }

            // T√¨m CameraSettingsUI ƒë·ªÉ s·ª≠ d·ª•ng shared parameters
            if (suDungSharedParameters)
            {
                cameraSettingsUI = FindFirstObjectByType<CameraSettingsUI>();
            }

            // Kh·ªüi t·∫°o g√≥c xoay d·ª±a tr√™n v·ªã tr√≠ hi·ªán t·∫°i
            if (mucTieuNPC != null)
            {
                Vector3 huong = transform.position - mucTieuNPC.position;
                
                // Ki·ªÉm tra h∆∞·ªõng h·ª£p l·ªá tr∆∞·ªõc khi t√≠nh to√°n
                if (IsValidVector3(huong) && huong.magnitude > 0.001f)
                {
                    gocXoayY = Mathf.Atan2(huong.x, huong.z) * Mathf.Rad2Deg;
                    
                    // Tr√°nh Asin v·ªõi gi√° tr·ªã ngo√†i ph·∫°m vi [-1, 1]
                    float sinValue = huong.y / huong.magnitude;
                    sinValue = Mathf.Clamp(sinValue, -1f, 1f);
                    gocXoayX = Mathf.Asin(sinValue) * Mathf.Rad2Deg;
                    
                    // Validation k·∫øt qu·∫£
                    if (!IsValidFloat(gocXoayX) || !IsValidFloat(gocXoayY))
                    {
                        Debug.LogWarning("üö® NPCCamera: G√≥c xoay kh·ªüi t·∫°o kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh");
                        gocXoayX = 0f;
                        gocXoayY = 0f;
                    }
                }
                else
                {
                    Debug.LogWarning("üö® NPCCamera: H∆∞·ªõng kh·ªüi t·∫°o kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng g√≥c m·∫∑c ƒë·ªãnh");
                    gocXoayX = 0f;
                    gocXoayY = 0f;
                }
            }

            Debug.Log($"üéØ NPCCamera kh·ªüi t·∫°o: {name} | Target: {(mucTieuNPC ? mucTieuNPC.name : "None")}");
        }

        /// <summary>
        /// C·∫≠p nh·∫≠t shared parameters t·ª´ CameraSettingsUI
        /// </summary>
        private void CapNhatSharedParameters()
        {
            if (!suDungSharedParameters || cameraSettingsUI == null) return;

            // L·∫•y parameters t·ª´ shared UI
            tocDoXoay = cameraSettingsUI.LayTocDoXoayNPC();
            doNhayChuot = cameraSettingsUI.LayDoNhayChuotNPC();
            nhanTocDoNhanh = cameraSettingsUI.LayNhanTocDoXoayNhanhNPC();
            khoangCach = cameraSettingsUI.LayKhoangCachNPC();
        }

        /// <summary>
        /// X·ª≠ l√Ω ƒëi·ªÅu khi·ªÉn camera
        /// </summary>
        private void XuLyDieuKhienCamera()
        {
            if (Mouse.current == null || Keyboard.current == null) return;

            // Xoay camera b·∫±ng chu·ªôt ph·∫£i
            if (Mouse.current.rightButton.isPressed)
            {
                Vector2 deltaXoay = Mouse.current.delta.ReadValue();
                
                // Validation delta input
                if (!IsValidFloat(deltaXoay.x) || !IsValidFloat(deltaXoay.y))
                {
                    Debug.LogWarning("üö® NPCCamera: Delta xoay chu·ªôt kh√¥ng h·ª£p l·ªá");
                    return;
                }
                
                float tocDoXoayHienTai = tocDoXoay;
                if (Keyboard.current.leftShiftKey.isPressed)
                {
                    tocDoXoayHienTai *= nhanTocDoNhanh;
                }

                // T√≠nh to√°n g√≥c xoay m·ªõi v·ªõi validation
                float deltaY = deltaXoay.x * doNhayChuot * tocDoXoayHienTai * Time.deltaTime * 0.02f;
                float deltaX = deltaXoay.y * doNhayChuot * tocDoXoayHienTai * Time.deltaTime * 0.02f;
                
                if (IsValidFloat(deltaY) && IsValidFloat(deltaX))
                {
                    gocXoayY += deltaY;
                    gocXoayX -= deltaX;
                    
                    // Gi·ªõi h·∫°n g√≥c xoay v√† validation
                    gocXoayX = Mathf.Clamp(gocXoayX, -89f, 89f);
                    gocXoayY = gocXoayY % 360f; // Normalize g√≥c Y
                    
                    // Double check validation
                    if (!IsValidFloat(gocXoayX) || !IsValidFloat(gocXoayY))
                    {
                        Debug.LogWarning("üö® NPCCamera: G√≥c xoay tr·ªü th√†nh kh√¥ng h·ª£p l·ªá, reset v·ªÅ 0");
                        gocXoayX = 0f;
                        gocXoayY = 0f;
                    }
                }
            }

            // Zoom b·∫±ng scroll wheel
            float scrollInput = Mouse.current.scroll.ReadValue().y;
            if (scrollInput != 0f && IsValidFloat(scrollInput))
            {
                float zoomDelta = scrollInput * tocDoZoom * Time.deltaTime;
                if (IsValidFloat(zoomDelta))
                {
                    khoangCachHienTai -= zoomDelta;
                    khoangCachHienTai = Mathf.Clamp(khoangCachHienTai, gioiHanZoom.x, gioiHanZoom.y);
                    
                    // Validation kho·∫£ng c√°ch
                    if (!IsValidFloat(khoangCachHienTai) || khoangCachHienTai <= 0f)
                    {
                        khoangCachHienTai = Mathf.Max(gioiHanZoom.x, 1f);
                        Debug.LogWarning("üö® NPCCamera: Kho·∫£ng c√°ch zoom kh√¥ng h·ª£p l·ªá, reset v·ªÅ gi√° tr·ªã t·ªëi thi·ªÉu");
                    }
                }
            }
        }

        /// <summary>
        /// C·∫≠p nh·∫≠t v·ªã tr√≠ camera
        /// </summary>
        private void CapNhatViTriCamera()
        {
            if (mucTieuNPC == null) return;

            // Validation: Ki·ªÉm tra c√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá
            if (!IsValidFloat(gocXoayX) || !IsValidFloat(gocXoayY) || !IsValidFloat(khoangCachHienTai))
            {
                Debug.LogWarning($"üö® NPCCamera: Ph√°t hi·ªán gi√° tr·ªã kh√¥ng h·ª£p l·ªá - gocXoayX: {gocXoayX}, gocXoayY: {gocXoayY}, khoangCach: {khoangCachHienTai}");
                ResetCameraValues();
                return;
            }

            // Validation: Ki·ªÉm tra v·ªã tr√≠ NPC
            if (!IsValidVector3(mucTieuNPC.position))
            {
                Debug.LogWarning($"üö® NPCCamera: V·ªã tr√≠ NPC kh√¥ng h·ª£p l·ªá: {mucTieuNPC.position}");
                return;
            }

            // ƒê·∫£m b·∫£o kho·∫£ng c√°ch t·ªëi thi·ªÉu
            if (khoangCachHienTai <= 0f)
            {
                khoangCachHienTai = 1f;
                Debug.LogWarning("üö® NPCCamera: Kho·∫£ng c√°ch <= 0, ƒë·∫∑t l·∫°i v·ªÅ 1f");
            }

            // T√≠nh v·ªã tr√≠ camera d·ª±a tr√™n g√≥c xoay v√† kho·∫£ng c√°ch
            Vector3 huongCamera = new Vector3(
                Mathf.Sin(gocXoayY * Mathf.Deg2Rad) * Mathf.Cos(gocXoayX * Mathf.Deg2Rad),
                Mathf.Sin(gocXoayX * Mathf.Deg2Rad),
                Mathf.Cos(gocXoayY * Mathf.Deg2Rad) * Mathf.Cos(gocXoayX * Mathf.Deg2Rad)
            );

            // Validation: Ki·ªÉm tra h∆∞·ªõng camera
            if (!IsValidVector3(huongCamera))
            {
                Debug.LogWarning($"üö® NPCCamera: H∆∞·ªõng camera kh√¥ng h·ª£p l·ªá: {huongCamera}");
                ResetCameraValues();
                return;
            }

            // V·ªã tr√≠ m·ª•c ti√™u v·ªõi offset
            Vector3 viTriMucTieu = mucTieuNPC.position + Vector3.up * doCao + offsetViTri;
            
            // Validation: Ki·ªÉm tra v·ªã tr√≠ m·ª•c ti√™u
            if (!IsValidVector3(viTriMucTieu))
            {
                Debug.LogWarning($"üö® NPCCamera: V·ªã tr√≠ m·ª•c ti√™u kh√¥ng h·ª£p l·ªá: {viTriMucTieu}");
                return;
            }
            
            // V·ªã tr√≠ camera m·ªõi
            Vector3 viTriMoi = viTriMucTieu + huongCamera * khoangCachHienTai;

            // Validation: Ki·ªÉm tra v·ªã tr√≠ m·ªõi
            if (!IsValidVector3(viTriMoi))
            {
                Debug.LogWarning($"üö® NPCCamera: V·ªã tr√≠ camera m·ªõi kh√¥ng h·ª£p l·ªá: {viTriMoi}");
                return;
            }

            // L√†m m·ªÅm chuy·ªÉn ƒë·ªông v·ªõi validation b·ªï sung
            if (IsValidVector3(transform.position))
            {
                Vector3 viTriMuon = Vector3.SmoothDamp(transform.position, viTriMoi, ref vanTocLamMem, doDaiLamMem);
                
                // Ki·ªÉm tra k·∫øt qu·∫£ SmoothDamp
                if (IsValidVector3(viTriMuon))
                {
                    transform.position = viTriMuon;
                }
                else
                {
                    Debug.LogWarning("üö® NPCCamera: SmoothDamp tr·∫£ v·ªÅ gi√° tr·ªã kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng v·ªã tr√≠ tr·ª±c ti·∫øp");
                    transform.position = viTriMoi;
                }
            }
            else
            {
                // N·∫øu v·ªã tr√≠ hi·ªán t·∫°i kh√¥ng h·ª£p l·ªá, ƒë·∫∑t tr·ª±c ti·∫øp
                transform.position = viTriMoi;
            }

            // Xoay camera nh√¨n v·ªÅ m·ª•c ti√™u
            if (tuDongFocus && IsValidVector3(viTriMucTieu) && IsValidVector3(transform.position))
            {
                Vector3 huongNhin = (viTriMucTieu - transform.position).normalized;
                
                if (IsValidVector3(huongNhin) && huongNhin.magnitude > 0.001f)
                {
                    Quaternion xoayMoi = Quaternion.LookRotation(huongNhin);
                    transform.rotation = Quaternion.Lerp(transform.rotation, xoayMoi, Time.deltaTime * 5f);
                }
            }
        }

        /// <summary>
        /// Ki·ªÉm tra m·ªôt s·ªë float c√≥ h·ª£p l·ªá kh√¥ng (kh√¥ng ph·∫£i NaN ho·∫∑c Infinity)
        /// </summary>
        private bool IsValidFloat(float value)
        {
            return !float.IsNaN(value) && !float.IsInfinity(value);
        }

        /// <summary>
        /// Ki·ªÉm tra m·ªôt Vector3 c√≥ h·ª£p l·ªá kh√¥ng
        /// </summary>
        private bool IsValidVector3(Vector3 vector)
        {
            return IsValidFloat(vector.x) && IsValidFloat(vector.y) && IsValidFloat(vector.z);
        }

        /// <summary>
        /// Reset c√°c gi√° tr·ªã camera v·ªÅ tr·∫°ng th√°i an to√†n
        /// </summary>
        private void ResetCameraValues()
        {
            gocXoayX = 0f;
            gocXoayY = 0f;
            khoangCachHienTai = Mathf.Max(khoangCach, 1f);
            vanTocLamMem = Vector3.zero;
            
            Debug.Log("üîÑ NPCCamera: ƒê√£ reset c√°c gi√° tr·ªã v·ªÅ tr·∫°ng th√°i an to√†n");
        }

        /// <summary>
        /// T√¨m NPC g·∫ßn nh·∫•t
        /// </summary>
        private void TimNPCGanNhat()
        {
            GameObject[] npcs = GameObject.FindGameObjectsWithTag("NPC");
            if (npcs.Length == 0)
            {
                Debug.LogWarning("üéØ Kh√¥ng t√¨m th·∫•y NPC n√†o trong scene");
                return;
            }

            float khoangCachGanNhat = float.MaxValue;
            GameObject npcGanNhat = null;

            foreach (GameObject npc in npcs)
            {
                float khoangCachDenNPC = Vector3.Distance(transform.position, npc.transform.position);
                if (khoangCachDenNPC < khoangCachGanNhat)
                {
                    khoangCachGanNhat = khoangCachDenNPC;
                    npcGanNhat = npc;
                }
            }

            if (npcGanNhat != null)
            {
                mucTieuNPC = npcGanNhat.transform;
                Debug.Log($"üéØ NPCCamera t·ª± ƒë·ªông ch·ªçn target: {npcGanNhat.name}");
            }
        }

        #region Public API

        /// <summary>
        /// B·∫≠t camera
        /// </summary>
        public void BatCamera()
        {
            if (cameraNPC != null)
            {
                cameraNPC.enabled = true;
                Debug.Log($"üìπ NPCCamera b·∫≠t: {name}");
            }
        }

        /// <summary>
        /// T·∫Øt camera
        /// </summary>
        public void TatCamera()
        {
            if (cameraNPC != null)
            {
                cameraNPC.enabled = false;
            }
        }

        /// <summary>
        /// L·∫•y camera component
        /// </summary>
        public UnityEngine.Camera GetCamera()
        {
            return cameraNPC;
        }

        /// <summary>
        /// ƒê·∫∑t m·ª•c ti√™u NPC
        /// </summary>
        public void DatMucTieuNPC(Transform target)
        {
            mucTieuNPC = target;
            if (target != null)
            {
                Debug.Log($"üéØ NPCCamera ƒë·∫∑t target m·ªõi: {target.name}");
            }
        }

        /// <summary>
        /// L·∫•y m·ª•c ti√™u NPC hi·ªán t·∫°i
        /// </summary>
        public Transform LayMucTieuNPC()
        {
            return mucTieuNPC;
        }

        /// <summary>
        /// Reset camera v·ªÅ v·ªã tr√≠ m·∫∑c ƒë·ªãnh
        /// </summary>
        public void ResetCamera()
        {
            khoangCachHienTai = khoangCach;
            gocXoayX = 0f;
            gocXoayY = 0f;
            
            if (mucTieuNPC != null)
            {
                Vector3 viTriMacDinh = mucTieuNPC.position + Vector3.back * khoangCach + Vector3.up * doCao;
                transform.position = viTriMacDinh;
                transform.LookAt(mucTieuNPC.position + Vector3.up * doCao);
            }
            
            Debug.Log($"üè† NPCCamera reset: {name}");
        }

        /// <summary>
        /// ƒê·∫∑t kho·∫£ng c√°ch
        /// </summary>
        public void DatKhoangCach(float khoangCachMoi)
        {
            khoangCach = Mathf.Max(0.5f, khoangCachMoi);
            khoangCachHienTai = khoangCach;
        }

        /// <summary>
        /// L·∫•y kho·∫£ng c√°ch hi·ªán t·∫°i
        /// </summary>
        public float LayKhoangCach()
        {
            return khoangCachHienTai;
        }

        /// <summary>
        /// ƒê·∫∑t ƒë·ªô nh·∫°y chu·ªôt
        /// </summary>
        public void DatDoNhayChuot(float doNhayMoi)
        {
            doNhayChuot = Mathf.Max(0.1f, doNhayMoi);
        }

        /// <summary>
        /// L·∫•y ƒë·ªô nh·∫°y chu·ªôt
        /// </summary>
        public float LayDoNhayChuot()
        {
            return doNhayChuot;
        }

        /// <summary>
        /// Ki·ªÉm tra camera c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
        /// </summary>
        public bool DangHoatDong()
        {
            return cameraNPC != null && cameraNPC.enabled;
        }

        /// <summary>
        /// B·∫≠t/t·∫Øt s·ª≠ d·ª•ng shared parameters
        /// </summary>
        public void BatTatSharedParameters(bool suDung)
        {
            suDungSharedParameters = suDung;
        }

        #endregion

        private void OnDrawGizmosSelected()
        {
            // V·∫Ω gizmo ƒë·ªÉ hi·ªÉn th·ªã target v√† kho·∫£ng c√°ch
            if (mucTieuNPC != null)
            {
                Gizmos.color = Color.yellow;
                Gizmos.DrawWireSphere(mucTieuNPC.position + Vector3.up * doCao, 0.5f);
                
                Gizmos.color = Color.green;
                Gizmos.DrawLine(transform.position, mucTieuNPC.position + Vector3.up * doCao);
                
                Gizmos.color = Color.blue;
                Gizmos.DrawWireSphere(mucTieuNPC.position, khoangCach);
            }
        }
    }
}