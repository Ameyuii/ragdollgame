using UnityEngine;
using UnityEngine.AI;
using System.Collections;

/// <summary>
/// Controller x·ª≠ l√Ω combat logic cho AI character
/// K·∫øt h·ª£p v·ªõi EnemyDetector ƒë·ªÉ t√¨m v√† t·∫•n c√¥ng k·∫ª ƒë·ªãch
/// T√≠ch h·ª£p v·ªõi AIMovementController v√† NavMeshAgent
/// </summary>
public class CombatController : MonoBehaviour
{    [Header("Combat Settings")]
    [SerializeField] private float attackDamage = 25f;
    [SerializeField] private float attackRange = 2f;
    [SerializeField] private float attackCooldown = 0.5f; // üîß GI·∫¢M COOLDOWN t·ª´ 1s xu·ªëng 0.5s ƒë·ªÉ test nhanh h∆°n
    [SerializeField] private float moveSpeed = 3f;
    [SerializeField] private float rotationSpeed = 5f;
    
    [Header("Combat Behavior")]
    [SerializeField] private CombatBehaviorType behaviorType = CombatBehaviorType.Aggressive;
    [SerializeField] private float engageDistance = 8f;
    [SerializeField] private float disengageDistance = 12f;
    [SerializeField] private bool canMove = true;
    [SerializeField] private bool debugMode = true;
    
    [Header("Components")]
    [SerializeField] private TeamMember teamMember;
    [SerializeField] private EnemyDetector enemyDetector;
    [SerializeField] private Animator animator;
    [SerializeField] private CharacterController characterController;
    [SerializeField] private NavMeshAgent navAgent;
    
    [Header("Combat Grace Period")]
    [SerializeField] private float targetLossGracePeriod = 0.5f; // 0.5s grace period
    private float lastTargetLossTime = -1f;
    
    // Private variables
    private CombatState currentState = CombatState.Idle;
    private TeamMember? currentTarget;
    private float lastAttackTime;
    private Vector3 moveDirection;
    private bool isAttacking = false;
    private bool useNavMeshMovement = false;
    
    // üé≤ Random Animation Attack System variables
    private string[] attackTriggers = {"Attack", "Attack1", "Attack2"};
    private string lastAttackUsed = "";
    private int consecutiveAttackCount = 0;
    private const int maxConsecutiveAttacks = 2;
    private System.Random attackRandom;
    
    // Events
    public System.Action<TeamMember> OnAttackStarted;
    public System.Action<TeamMember, float> OnDamageDealt;
    public System.Action<CombatState> OnStateChanged;
    
    // Properties
    public CombatState CurrentState => currentState;
    public TeamMember? CurrentTarget => currentTarget;
    public bool CanAttack => Time.time >= lastAttackTime + attackCooldown;
    public bool IsInCombat => currentState != CombatState.Idle;
      private void Awake()
    {
        // Auto-find components
        if (teamMember == null)
            teamMember = GetComponent<TeamMember>();
        if (enemyDetector == null)
            enemyDetector = GetComponent<EnemyDetector>();
        if (animator == null)
            animator = GetComponent<Animator>();
        if (characterController == null)
            characterController = GetComponent<CharacterController>();
        if (navAgent == null)
            navAgent = GetComponent<NavMeshAgent>();
            
        // Determine movement type
        useNavMeshMovement = navAgent != null;
        
        // üé≤ Initialize Random Animation Attack System
        attackRandom = new System.Random(GetInstanceID());
        Debug.Log($"üéØ [RANDOM ATTACK] {gameObject.name} Random Attack System initialized v·ªõi seed: {GetInstanceID()}");
          // üî• CRITICAL DEBUG: Log NavMeshAgent initial state - T·∫ÆT LOG
        if (navAgent != null)
        {
            // Debug.Log($"ü§ñ [COMBAT INIT] {gameObject.name} NavMeshAgent FOUND:"); // T·∫ÆT
            // Debug.Log($"    - enabled: {navAgent.enabled}"); // T·∫ÆT
            // Debug.Log($"    - speed: {navAgent.speed:F2}"); // T·∫ÆT
            // Debug.Log($"    - stoppingDistance: {navAgent.stoppingDistance:F2}"); // T·∫ÆT
            // Debug.Log($"    - isStopped: {navAgent.isStopped}"); // T·∫ÆT
            // Debug.Log($"    - useNavMeshMovement: {useNavMeshMovement}"); // T·∫ÆT
            
            // üî• CRITICAL FIX: Ensure proper NavMeshAgent settings for combat
            ValidateNavMeshAgentSettings();
        }
        else
        {
            Debug.LogWarning($"‚ùå [COMBAT INIT] {gameObject.name} NavMeshAgent NOT FOUND!");
        }
    }
      /// <summary>
    /// Validate v√† fix NavMeshAgent settings ƒë·ªÉ tr√°nh c√°c v·∫•n ƒë·ªÅ movement
    /// </summary>
    private void ValidateNavMeshAgentSettings()
    {
        if (navAgent == null) return;
        
        bool hasChanges = false;
        
        // ƒê·∫£m b·∫£o speed > 0
        if (navAgent.speed <= 0)
        {
            navAgent.speed = moveSpeed;
            hasChanges = true;
            // Debug.Log($"üîß [NAVMESH VALIDATE] {gameObject.name} Fixed speed: {navAgent.speed}"); // T·∫ÆT
        }
        
        // ƒê·∫£m b·∫£o stoppingDistance reasonable
        if (navAgent.stoppingDistance <= 0 || navAgent.stoppingDistance > attackRange)
        {
            navAgent.stoppingDistance = Mathf.Max(attackRange * 0.5f, 0.5f);
            hasChanges = true;
            // Debug.Log($"üîß [NAVMESH VALIDATE] {gameObject.name} Fixed stoppingDistance: {navAgent.stoppingDistance:F2}"); // T·∫ÆT
        }
        
        // ƒê·∫£m b·∫£o acceleration reasonable
        if (navAgent.acceleration <= 0)
        {
            navAgent.acceleration = 8f;
            hasChanges = true;
            // Debug.Log($"üîß [NAVMESH VALIDATE] {gameObject.name} Fixed acceleration: {navAgent.acceleration}"); // T·∫ÆT
        }
        
        // ƒê·∫£m b·∫£o angularSpeed reasonable
        if (navAgent.angularSpeed <= 0)
        {
            navAgent.angularSpeed = 120f;
            hasChanges = true;
            // Debug.Log($"üîß [NAVMESH VALIDATE] {gameObject.name} Fixed angularSpeed: {navAgent.angularSpeed}"); // T·∫ÆT
        }
        
        // üî• ANTI-COLLISION SETTINGS: Ensure proper avoidance
        if (navAgent.radius <= 0)
        {
            navAgent.radius = 0.5f;
            hasChanges = true;
            // Debug.Log($"üîß [NAVMESH VALIDATE] {gameObject.name} Fixed radius: {navAgent.radius}"); // T·∫ÆT
        }
        
        // Set avoidance priority ƒë·ªÉ tr√°nh conflict
        if (navAgent.avoidancePriority == 50) // Default value
        {
            navAgent.avoidancePriority = UnityEngine.Random.Range(40, 60);
            hasChanges = true;
            // Debug.Log($"üîß [NAVMESH VALIDATE] {gameObject.name} Set avoidancePriority: {navAgent.avoidancePriority}"); // T·∫ÆT
        }
        
        if (hasChanges)
        {
            // Debug.Log($"‚úÖ [NAVMESH VALIDATE] {gameObject.name} NavMeshAgent settings validated and fixed"); // T·∫ÆT
        }
    }
    
    private void Start()
    {
        // Validate components
        if (teamMember == null)
        {
            Debug.LogError($"CombatController on {gameObject.name} requires TeamMember component!");
            enabled = false;
            return;
        }
        
        if (enemyDetector == null)
        {
            Debug.LogError($"CombatController on {gameObject.name} requires EnemyDetector component!");
            enabled = false;
            return;
        }
          // Subscribe to events
        enemyDetector.OnTargetChanged += OnTargetChanged;
        teamMember.OnDeath += OnDeath;
        
        // üîß RESET ATTACK COOLDOWN ƒë·ªÉ cho ph√©p attack ngay l·∫≠p t·ª©c
        lastAttackTime = Time.time - attackCooldown - 1f; // Reset v·ªÅ qu√° kh·ª© ƒë·ªÉ c√≥ th·ªÉ attack ngay        // if (debugMode)
            // Debug.Log($"CombatController initialized for {gameObject.name} - Ready to attack!"); // T·∫ÆT
    }
    
    private void Update()
    {
        if (!teamMember.IsAlive) return;
          // üî• DEBUG: Log Update() execution ƒë·ªÉ verify method ƒë∆∞·ª£c g·ªçi - T·∫ÆT
        // if (debugMode && currentState != CombatState.Idle)
        // {
        //     Debug.Log($"üîÑ [COMBAT UPDATE] {gameObject.name} Update() executing - State: {currentState}, Target: {(currentTarget != null ? currentTarget.name : "null")}");
        // }
        
        UpdateCombatState();
        HandleCombatBehavior();
        HandleMovement();
        HandleRotation();
    }
    
    /// <summary>
    /// Update combat state machine - FIXED LOGIC
    /// </summary>
    private void UpdateCombatState()
    {
        CombatState newState = currentState;
        float distanceToTarget = GetDistanceToTarget();
        
        // Debug.Log($"üîÑ [COMBAT] {gameObject.name} UpdateCombatState - Current: {currentState}, HasEnemies: {enemyDetector.HasEnemies}, Distance: {distanceToTarget:F2}m"); // T·∫ÆT
        
        switch (currentState)
        {
            case CombatState.Idle:
                if (enemyDetector.HasEnemies && currentTarget != null)
                {
                    newState = CombatState.Engaging;
                    // Debug.Log($"üéØ [COMBAT] {gameObject.name} Idle -> Engaging v·ªõi {currentTarget.name}"); // T·∫ÆT
                }
                break;
                  case CombatState.Engaging:
                // üî• CRITICAL FIX: Ki·ªÉm tra target loss v·ªõi grace period ƒë·ªÉ tr√°nh m·∫•t target ƒë·ªôt ng·ªôt
                bool hasValidTarget = enemyDetector.HasEnemies && currentTarget != null && currentTarget.IsAlive;
                
                if (!hasValidTarget)
                {
                    // Mark th·ªùi ƒëi·ªÉm m·∫•t target
                    if (lastTargetLossTime < 0)
                    {
                        lastTargetLossTime = Time.time;
                        // Debug.Log($"‚ö†Ô∏è [COMBAT] {gameObject.name} M·∫•t target - b·∫Øt ƒë·∫ßu grace period {targetLossGracePeriod}s"); // T·∫ÆT
                    }
                    
                    // Ch·ªâ quay v·ªÅ Idle sau grace period
                    if (Time.time - lastTargetLossTime > targetLossGracePeriod)
                    {
                        newState = CombatState.Idle;
                        lastTargetLossTime = -1f;
                        // Debug.Log($"‚ùå [COMBAT] {gameObject.name} Engaging -> Idle (grace period expired)"); // T·∫ÆT
                    }
                }
                else
                {
                    // Reset grace period khi c√≥ target tr·ªü l·∫°i
                    lastTargetLossTime = -1f;
                    
                    if (distanceToTarget <= attackRange)
                    {
                        newState = CombatState.InCombat;
                        // Debug.Log($"‚öîÔ∏è [COMBAT] {gameObject.name} Engaging -> InCombat (distance: {distanceToTarget:F2}m <= {attackRange:F2}m)"); // T·∫ÆT
                    }
                }
                break;
                  case CombatState.InCombat:
                // üî• CRITICAL FIX: Grace period trong InCombat c≈©ng ƒë·ªÉ tr√°nh m·∫•t target ƒë·ªôt ng·ªôt
                bool hasValidTargetInCombat = enemyDetector.HasEnemies && currentTarget != null && currentTarget.IsAlive;
                
                if (!hasValidTargetInCombat)
                {
                    if (lastTargetLossTime < 0)
                    {
                        lastTargetLossTime = Time.time;
                        // Debug.Log($"‚ö†Ô∏è [COMBAT] {gameObject.name} InCombat m·∫•t target - grace period {targetLossGracePeriod}s"); // T·∫ÆT
                    }
                    
                    if (Time.time - lastTargetLossTime > targetLossGracePeriod)
                    {
                        newState = CombatState.Idle;
                        lastTargetLossTime = -1f;
                        // Debug.Log($"‚ùå [COMBAT] {gameObject.name} InCombat -> Idle (grace period expired)"); // T·∫ÆT
                    }
                }
                else
                {
                    lastTargetLossTime = -1f;
                    
                    if (distanceToTarget > disengageDistance)
                    {
                        newState = CombatState.Engaging;
                        // Debug.Log($"üèÉ [COMBAT] {gameObject.name} InCombat -> Engaging (distance: {distanceToTarget:F2}m > {disengageDistance:F2}m)"); // T·∫ÆT
                    }
                }
                break;
        }
        
        if (newState != currentState)
        {
            // Debug.Log($"üîÑ [COMBAT] {gameObject.name} STATE CHANGE: {currentState} -> {newState}"); // T·∫ÆT
            ChangeState(newState);
        }
    }
    
    /// <summary>
    /// Change combat state - ENHANCED DEBUG
    /// </summary>
    private void ChangeState(CombatState newState)
    {
        CombatState previousState = currentState;
        currentState = newState;
        
        // Always log state changes
        // Debug.Log($"üîÑ [COMBAT] {gameObject.name} combat state: {previousState} -> {currentState}"); // T·∫ÆT
        
        // Invoke state changed event
        OnStateChanged?.Invoke(currentState);
        // Debug.Log($"üì¢ [COMBAT] {gameObject.name} OnStateChanged event fired: {currentState}"); // T·∫ÆT
        
        // State entry actions
        switch (currentState)
        {
            case CombatState.Idle:
                SetAnimationState("idle");
                // Debug.Log($"üò¥ [COMBAT] {gameObject.name} entered IDLE state"); // T·∫ÆT
                break;
            case CombatState.Engaging:
                SetAnimationState("walking");
                // Debug.Log($"üèÉ [COMBAT] {gameObject.name} entered ENGAGING state v·ªõi target {currentTarget?.name}"); // T·∫ÆT
                
                // ‚úÖ CRITICAL FIX: Ensure NavMeshAgent ready cho movement trong Engaging state
                if (useNavMeshMovement && navAgent != null)
                {
                    if (!navAgent.enabled)
                    {
                        navAgent.enabled = true;
                        // Debug.Log($"üîß [COMBAT] {gameObject.name} ENABLED NavMeshAgent for Engaging state"); // T·∫ÆT
                    }
                    
                    if (navAgent.isStopped)
                    {
                        navAgent.isStopped = false;
                        // Debug.Log($"üîß [COMBAT] {gameObject.name} UNSTOP NavMeshAgent for Engaging state"); // T·∫ÆT
                    }
                    
                    if (navAgent.speed <= 0)
                    {
                        navAgent.speed = moveSpeed;
                        // Debug.Log($"üîß [COMBAT] {gameObject.name} SET NavMeshAgent speed = {moveSpeed} for Engaging state"); // T·∫ÆT
                    }
                    
                    // Debug.Log($"‚úÖ [COMBAT] {gameObject.name} NavMeshAgent ready for Engaging movement - enabled: {navAgent.enabled}, isStopped: {navAgent.isStopped}, speed: {navAgent.speed:F2}"); // T·∫ÆT
                }
                break;
            case CombatState.InCombat:
                SetAnimationState("combat");
                // Debug.Log($"‚öîÔ∏è [COMBAT] {gameObject.name} entered IN_COMBAT state v·ªõi target {currentTarget?.name}"); // T·∫ÆT
                break;
        }
        
        // Verify state change
        if (currentState == newState)
        {
            // Debug.Log($"‚úÖ [COMBAT] {gameObject.name} state change SUCCESSFUL: {newState}"); // T·∫ÆT
        }
        else
        {
            Debug.LogError($"‚ùå [COMBAT] {gameObject.name} state change FAILED! Expected: {newState}, Actual: {currentState}");
        }
    }
    
    /// <summary>
    /// Handle combat behavior based on current state
    /// </summary>
    private void HandleCombatBehavior()
    {
        switch (currentState)
        {
            case CombatState.Idle:
                // Do nothing, just idle
                moveDirection = Vector3.zero;
                break;
                
            case CombatState.Engaging:
                HandleEngaging();
                break;
                
            case CombatState.InCombat:
                HandleInCombat();
                break;
        }
    }
      /// <summary>
    /// Handle engaging behavior - moving toward enemy v·ªõi NavMeshAgent integration
    /// FIX: Th√™m logic anti-loop v√† stoppingDistance
    /// </summary>
    private void HandleEngaging()
    {
        // Debug.Log($"üèÉ [COMBAT ENGAGING] {gameObject.name} HandleEngaging() START"); // T·∫ÆT
        
        if (currentTarget == null)
        {
            // Debug.Log($"‚ùå [COMBAT ENGAGING] {gameObject.name} currentTarget is null, t√¨m target m·ªõi"); // T·∫ÆT
            // T√¨m target m·ªõi t·ª´ EnemyDetector
            if (enemyDetector.HasEnemies)
            {
                currentTarget = enemyDetector.GetClosestEnemy();
                // Debug.Log($"‚úÖ [COMBAT ENGAGING] {gameObject.name} t√¨m ƒë∆∞·ª£c target m·ªõi: {(currentTarget != null ? currentTarget.name : "null")}"); // T·∫ÆT
            }
            return;
        }
        
        float distanceToTarget = GetDistanceToTarget();        // Debug.Log($"üìè [COMBAT ENGAGING] {gameObject.name} Distance to {currentTarget.name}: {distanceToTarget:F2}m, AttackRange: {attackRange:F2}m"); // T·∫ÆT
        // Debug.Log($"üîß [COMBAT ENGAGING] {gameObject.name} CanMove: {canMove}, UseNavMesh: {useNavMeshMovement}"); // T·∫ÆT// üî• CRITICAL FIX: ƒêi·ªÅu ch·ªânh stopping distance ƒë·ªÉ NPC ƒë·∫øn R·∫§T G·∫¶N nhau cho combat
        float effectiveStoppingDistance = 0.15f;
        
        if (canMove && distanceToTarget > effectiveStoppingDistance)
        {
            // Debug.Log($"üéØ [COMBAT ENGAGING] {gameObject.name} C·∫¶N DI CHUY·ªÇN ƒë·∫øn target - Distance: {distanceToTarget:F2}m > StopDistance: {effectiveStoppingDistance:F2}m"); // T·∫ÆT
            
            // Move toward target - s·ª≠ d·ª•ng NavMeshAgent n·∫øu c√≥
            if (useNavMeshMovement && navAgent != null && navAgent.enabled)
            {                // Debug.Log($"ü§ñ [COMBAT ENGAGING] {gameObject.name} S·ª¨ D·ª§NG NAVMESH MOVEMENT"); // T·∫ÆT
                // Debug.Log($"    - NavAgent.enabled: {navAgent.enabled}"); // T·∫ÆT
                // Debug.Log($"    - NavAgent.isStopped: {navAgent.isStopped}"); // T·∫ÆT
                // Debug.Log($"    - NavAgent.speed: {navAgent.speed:F2}"); // T·∫ÆT
                // Debug.Log($"    - Target position: {currentTarget.transform.position}"); // T·∫ÆT
                
                // ‚úÖ CRITICAL FIX: Ensure NavMeshAgent can move
                if (navAgent.isStopped)
                {
                    navAgent.isStopped = false;
                    // Debug.Log($"üîß [COMBAT ENGAGING] {gameObject.name} FIXED NavAgent.isStopped = false"); // T·∫ÆT
                }
                
                if (navAgent.speed <= 0)
                {
                    navAgent.speed = moveSpeed;
                    // Debug.Log($"üîß [COMBAT ENGAGING] {gameObject.name} FIXED NavAgent.speed = {moveSpeed}"); // T·∫ÆT
                }
                
                // üî• CRITICAL FIX: Set proper stopping distance tr√™n NavMeshAgent
                navAgent.stoppingDistance = effectiveStoppingDistance;
                // Debug.Log($"üîß [COMBAT ENGAGING] {gameObject.name} SET NavAgent.stoppingDistance = {effectiveStoppingDistance:F2}"); // T·∫ÆT
                  // üî• ANTI-COLLISION FIX: Ch·ªâ offset n·∫øu target c≈©ng ƒëang target m√¨nh ƒë·ªÉ tr√°nh c·∫£ 2 c√πng offset
                Vector3 targetPosition = currentTarget.transform.position;
                Vector3 myPosition = transform.position;
                Vector3 directionToTarget = (targetPosition - myPosition).normalized;
                
                Vector3 finalTargetPos;
                
                // Ki·ªÉm tra n·∫øu target c≈©ng ƒëang target m√¨nh th√¨ ch·ªâ m·ªôt b√™n offset
                CombatController targetCombat = currentTarget.GetComponent<CombatController>();
                bool targetIsTargetingMe = targetCombat != null && targetCombat.currentTarget == teamMember;                if (targetIsTargetingMe && gameObject.name.CompareTo(currentTarget.name) < 0)
                {
                    // NPC v·ªõi t√™n "nh·ªè h∆°n" s·∫Ω offset c·ª±c √≠t (ch·ªâ 0.05m), NPC kia ƒëi th·∫≥ng
                    finalTargetPos = targetPosition - directionToTarget * 0.05f;
                    // Debug.Log($"üîÑ [COMBAT ENGAGING] {gameObject.name} S·ª¨ D·ª§NG MINIMAL OFFSET position (0.05m)"); // T·∫ÆT
                }
                else
                {
                    // ƒêi th·∫≥ng ƒë·∫øn target position v·ªõi stopping distance c·ªßa NavAgent
                    finalTargetPos = targetPosition;
                    // Debug.Log($"üéØ [COMBAT ENGAGING] {gameObject.name} ƒêI TH·∫≤NG ƒë·∫øn target position"); // T·∫ÆT
                }
                  navAgent.SetDestination(finalTargetPos);
                // Debug.Log($"‚úÖ [COMBAT ENGAGING] {gameObject.name} NavAgent.SetDestination() CALLED v·ªõi offset position {finalTargetPos}"); // T·∫ÆT
                
                // üî• CRITICAL FIX: Set moveDirection ƒë·ªÉ HandleNavMeshMovement nh·∫≠n di·ªán movement
                moveDirection = directionToTarget;
            }
            else
            {
                // Debug.Log($"üö∂ [COMBAT ENGAGING] {gameObject.name} S·ª¨ D·ª§NG DIRECT MOVEMENT (fallback)"); // T·∫ÆT
                // Fallback to direct movement
                Vector3 directionToTarget = (currentTarget.transform.position - transform.position).normalized;
                moveDirection = directionToTarget;
                // Debug.Log($"    - moveDirection: {moveDirection}"); // T·∫ÆT
            }
        }
        else
        {
            // Debug.Log($"üõë [COMBAT ENGAGING] {gameObject.name} KH√îNG C·∫¶N DI CHUY·ªÇN - ƒë√£ ƒë·ªß g·∫ßn target (Distance: {distanceToTarget:F2}m <= StopDistance: {effectiveStoppingDistance:F2}m)"); // T·∫ÆT
            moveDirection = Vector3.zero;
            // D·ª´ng NavMesh movement khi ƒë√£ g·∫ßn target
            if (useNavMeshMovement && navAgent != null && navAgent.hasPath)
            {
                navAgent.isStopped = true;
                // Debug.Log($"üõë [COMBAT ENGAGING] {gameObject.name} NavAgent.isStopped = true - d·ª´ng movement"); // T·∫ÆT
            }
        }
        
        // Debug.Log($"üèÅ [COMBAT ENGAGING] {gameObject.name} HandleEngaging() END"); // T·∫ÆT
    }
    
    /// <summary>
    /// Handle in combat behavior - attack and position
    /// </summary>
    private void HandleInCombat()
    {
        if (currentTarget == null)
        {
            Debug.Log($"‚ùå [COMBAT] {gameObject.name} HandleInCombat - currentTarget is null!");
            return;
        }
        
        float distanceToTarget = GetDistanceToTarget();
        // Debug.Log($"‚öîÔ∏è [COMBAT] {gameObject.name} HandleInCombat - attacking target: {currentTarget.name}, distance: {distanceToTarget:F2}m"); // T·∫ÆT
        
        // Combat range check log
        // Debug.Log($"üìè [COMBAT] {gameObject.name} Combat range check: distance={distanceToTarget:F2}m, attackRange={attackRange:F2}m, CanAttack={CanAttack}, isAttacking={isAttacking}"); // T·∫ÆT
        
        // Attack if in range and cooldown ready
        if (distanceToTarget <= attackRange && CanAttack && !isAttacking)
        {
            Debug.Log($"üéØ [COMBAT] {gameObject.name} Attack conditions met - executing attack on {currentTarget.name}");
            StartCoroutine(PerformAttack());
        }
        else if (distanceToTarget > attackRange)
        {
            // Debug.Log($"üìè [COMBAT] {gameObject.name} Target out of attack range: {distanceToTarget:F2}m > {attackRange:F2}m"); // T·∫ÆT
        }
        else if (!CanAttack)
        {
            // Debug.Log($"‚è∞ [COMBAT] {gameObject.name} Attack on cooldown - time since last attack: {Time.time - lastAttackTime:F2}s"); // T·∫ÆT
        }
        
        // Movement behavior trong combat
        switch (behaviorType)
        {
            case CombatBehaviorType.Aggressive:
                // Lu√¥n ti·∫øn v·ªÅ ph√≠a enemy
                if (distanceToTarget > attackRange * 0.8f)
                {
                    Vector3 directionToTarget = (currentTarget.transform.position - transform.position).normalized;
                    moveDirection = directionToTarget;
                }
                else
                {
                    moveDirection = Vector3.zero;
                }
                break;
                
            case CombatBehaviorType.Defensive:
                // Gi·ªØ kho·∫£ng c√°ch, ch·ªâ t·∫•n c√¥ng khi enemy ƒë·∫øn g·∫ßn
                if (distanceToTarget < attackRange * 0.5f)
                {
                    Vector3 directionAwayFromTarget = (transform.position - currentTarget.transform.position).normalized;
                    moveDirection = directionAwayFromTarget;
                }
                else
                {
                    moveDirection = Vector3.zero;
                }
                break;
                
            case CombatBehaviorType.Balanced:
                // K·∫øt h·ª£p, t√πy v√†o health
                if (teamMember.HealthPercent > 0.5f)
                {
                    // Aggressive when healthy
                    if (distanceToTarget > attackRange * 0.8f)
                    {
                        Vector3 directionToTarget = (currentTarget.transform.position - transform.position).normalized;
                        moveDirection = directionToTarget;
                    }
                    else
                    {
                        moveDirection = Vector3.zero;
                    }
                }
                else
                {
                    // Defensive when low health
                    if (distanceToTarget < attackRange * 0.7f)
                    {
                        Vector3 directionAwayFromTarget = (transform.position - currentTarget.transform.position).normalized;
                        moveDirection = directionAwayFromTarget;
                    }
                    else
                    {
                        moveDirection = Vector3.zero;
                    }
                }
                break;
        }
    }
    
    /// <summary>
    /// Perform attack coroutine
    /// </summary>
    private IEnumerator PerformAttack()
    {
        if (currentTarget == null || !currentTarget.IsAlive)
        {
            Debug.LogWarning($"‚ö†Ô∏è [COMBAT] {gameObject.name} PerformAttack cancelled - target invalid");
            yield break;
        }
        
        isAttacking = true;
        lastAttackTime = Time.time;
        
        Debug.Log($"ü•ä [COMBAT] {gameObject.name} STARTING ATTACK on {currentTarget.name}");
        
        OnAttackStarted?.Invoke(currentTarget);
        
        // üé≤ Trigger random attack animation thay v√¨ fixed "attack" trigger
        TriggerAttackAnimation();
        
        Debug.Log($"üé¨ [COMBAT] {gameObject.name} Random attack animation triggered for {currentTarget.name}");
        
        // Wait for animation timing (c√≥ th·ªÉ adjust)
        yield return new WaitForSeconds(0.3f);
        
        // Check if target still valid and in range
        if (currentTarget != null && currentTarget.IsAlive && GetDistanceToTarget() <= attackRange)
        {
            Debug.Log($"üí• [COMBAT] {gameObject.name} Attack executed on target: {currentTarget.name} - dealing {attackDamage} damage");
            
            // Deal damage
            currentTarget.TakeDamage(attackDamage, teamMember);
            OnDamageDealt?.Invoke(currentTarget, attackDamage);
            
            // Apply knockback force if target has ragdoll
            RagdollPhysicsController targetRagdoll = currentTarget.GetComponent<RagdollPhysicsController>();
            if (targetRagdoll != null && !currentTarget.IsAlive)
            {
                Debug.Log($"üíÄ [COMBAT] {gameObject.name} Target killed - applying ragdoll force to {currentTarget.name}");
                
                // Apply death force
                Vector3 forceDirection = (currentTarget.transform.position - transform.position).normalized;
                Vector3 force = forceDirection * 300f + Vector3.up * 100f;
                Vector3 position = currentTarget.transform.position + Vector3.up;
                
                targetRagdoll.ApplyForce(force, position);
            }
        }
        else
        {
            Debug.LogWarning($"‚ö†Ô∏è [COMBAT] {gameObject.name} Attack missed - target moved out of range or died");
        }
        
        // Wait for attack cooldown
        yield return new WaitForSeconds(0.2f);
        
        isAttacking = false;
        Debug.Log($"‚úÖ [COMBAT] {gameObject.name} Attack sequence completed");
    }
      /// <summary>
    /// Handle movement - t√≠ch h·ª£p v·ªõi NavMeshAgent ho·∫∑c CharacterController
    /// </summary>
    private void HandleMovement()
    {
        // Debug.Log($"üö∂ [COMBAT MOVEMENT] {gameObject.name} HandleMovement() START"); // T·∫ÆT
        // Debug.Log($"    - canMove: {canMove}"); // T·∫ÆT
        // Debug.Log($"    - useNavMeshMovement: {useNavMeshMovement}"); // T·∫ÆT
        // Debug.Log($"    - navAgent != null: {navAgent != null}"); // T·∫ÆT
        // Debug.Log($"    - navAgent.enabled: {(navAgent != null ? navAgent.enabled.ToString() : "N/A")}"); // T·∫ÆT
        // Debug.Log($"    - characterController != null: {characterController != null}"); // T·∫ÆT
        
        if (!canMove)
        {
            // Debug.Log($"‚ùå [COMBAT MOVEMENT] {gameObject.name} canMove = false, SKIP movement"); // T·∫ÆT
            return;
        }
        
        if (useNavMeshMovement && navAgent != null && navAgent.enabled)
        {
            // Debug.Log($"ü§ñ [COMBAT MOVEMENT] {gameObject.name} S·ª¨ D·ª§NG NavMeshAgent movement"); // T·∫ÆT
            // S·ª≠ d·ª•ng NavMeshAgent cho movement trong combat
            HandleNavMeshMovement();
        }
        else if (characterController != null)
        {
            // Debug.Log($"üö∂ [COMBAT MOVEMENT] {gameObject.name} S·ª¨ D·ª§NG CharacterController movement (fallback)"); // T·∫ÆT
            // Fallback to CharacterController
            HandleCharacterControllerMovement();
        }
        else
        {
            // Debug.LogWarning($"‚ö†Ô∏è [COMBAT MOVEMENT] {gameObject.name} KH√îNG C√ì MOVEMENT METHOD AVAILABLE!"); // T·∫ÆT
        }
        
        // Debug.Log($"üèÅ [COMBAT MOVEMENT] {gameObject.name} HandleMovement() END"); // T·∫ÆT
    }
      /// <summary>
    /// Handle movement v·ªõi NavMeshAgent - c·∫£i ti·∫øn cho combat v·ªõi anti-stuck logic
    /// </summary>
    private void HandleNavMeshMovement()
    {
        if (moveDirection.magnitude > 0.1f && currentTarget != null)
        {
            // Trong combat, di chuy·ªÉn tr·ª±c ti·∫øp ƒë·∫øn position target v·ªõi offset
            Vector3 targetPosition = currentTarget.transform.position;
            // Debug.Log($"    - Original target position: {targetPosition}"); // T·∫ÆT
            
            // üî• CRITICAL FIX: Calculate smart target position ƒë·ªÉ tr√°nh collision
            Vector3 directionToTarget = (transform.position - targetPosition).normalized;
            float offsetDistance = Mathf.Max(attackRange * 0.8f, navAgent.stoppingDistance, 1.0f);
            
            // Adjust target position based on behavior
            switch (behaviorType)
            {
                case CombatBehaviorType.Aggressive:
                    targetPosition = targetPosition + directionToTarget * offsetDistance;
                    // Debug.Log($"    - Aggressive behavior: Offset position: {targetPosition} (offset: {offsetDistance:F2}m)"); // T·∫ÆT
                    break;
                    
                case CombatBehaviorType.Defensive:
                    targetPosition = targetPosition + directionToTarget * (offsetDistance * 1.5f);
                    // Debug.Log($"    - Defensive behavior: Far offset position: {targetPosition}"); // T·∫ÆT
                    break;
                    
                default:
                    targetPosition = targetPosition + directionToTarget * offsetDistance;
                    // Debug.Log($"    - Default behavior: Standard offset position: {targetPosition}"); // T·∫ÆT
                    break;
            }
            
            // üî• ANTI-STUCK FIX: Check n·∫øu target position qu√° g·∫ßn current position
            float distanceToNewTarget = Vector3.Distance(transform.position, targetPosition);
            if (distanceToNewTarget < 0.5f)
            {
                // Debug.Log($"‚ö†Ô∏è [NAVMESH MOVEMENT] {gameObject.name} Target qu√° g·∫ßn ({distanceToNewTarget:F2}m) - SKIP SetDestination"); // T·∫ÆT
                navAgent.isStopped = true;
                return;
            }
            
            // Debug.Log($"ü§ñ [NAVMESH MOVEMENT] {gameObject.name} CALLING navAgent.SetDestination({targetPosition})"); // T·∫ÆT
            // Debug.Log($"    - Distance to new target: {distanceToNewTarget:F2}m"); // T·∫ÆT
            
            // Ensure agent is ready to move
            if (navAgent.isStopped)
            {
                navAgent.isStopped = false;
                // Debug.Log($"üîß [NAVMESH MOVEMENT] {gameObject.name} Un-stopped NavAgent for movement"); // T·∫ÆT
            }
            
            navAgent.SetDestination(targetPosition);
            
            // üî• CRITICAL CHECK: Verify NavMeshAgent state sau khi SetDestination
            // Debug.Log($"‚úÖ [NAVMESH MOVEMENT] {gameObject.name} VERIFY SAU SetDestination:"); // T·∫ÆT
            // Debug.Log($"    - navAgent.hasPath: {navAgent.hasPath}"); // T·∫ÆT
            // Debug.Log($"    - navAgent.pathStatus: {navAgent.pathStatus}"); // T·∫ÆT
            // Debug.Log($"    - navAgent.remainingDistance: {navAgent.remainingDistance:F2}"); // T·∫ÆT
            // Debug.Log($"    - navAgent.destination: {navAgent.destination}"); // T·∫ÆT
            
            // üî• STUCK PREVENTION: Ki·ªÉm tra n·∫øu NavAgent b·ªã stuck
            if (navAgent.hasPath && navAgent.pathStatus == UnityEngine.AI.NavMeshPathStatus.PathComplete)
            {
                if (navAgent.remainingDistance <= navAgent.stoppingDistance && navAgent.velocity.magnitude < 0.1f)
                {
                    // Debug.Log($"‚úÖ [NAVMESH MOVEMENT] {gameObject.name} ƒê√£ ƒë·∫øn ƒë√≠ch ho·∫∑c g·∫ßn ƒë√≠ch - d·ª´ng movement"); // T·∫ÆT
                    navAgent.isStopped = true;
                }
            }
            else if (navAgent.pathStatus == UnityEngine.AI.NavMeshPathStatus.PathInvalid)
            {
                // Debug.LogWarning($"‚ö†Ô∏è [NAVMESH MOVEMENT] {gameObject.name} Path INVALID - trying direct approach"); // T·∫ÆT
                navAgent.SetDestination(currentTarget.transform.position);
            }
        }
        else
        {
            // Debug.Log($"‚ùå [NAVMESH MOVEMENT] {gameObject.name} ƒêI·ªÄU KI·ªÜN MOVEMENT KH√îNG ƒê·∫†T"); // T·∫ÆT
            // if (moveDirection.magnitude <= 0.1f) // T·∫ÆT
            //     Debug.Log($"    - moveDirection too small: {moveDirection.magnitude:F2}"); // T·∫ÆT
            // if (currentTarget == null) // T·∫ÆT
            //     Debug.Log($"    - currentTarget is null"); // T·∫ÆT
                
            // Stop movement khi kh√¥ng c·∫ßn di chuy·ªÉn
            if (!navAgent.isStopped)
            {
                navAgent.isStopped = true;
                // Debug.Log($"üõë [NAVMESH MOVEMENT] {gameObject.name} Stopped NavAgent - no movement needed"); // T·∫ÆT
            }
        }
        
        // Update animator v·ªõi NavMesh velocity
        if (animator != null)
        {
            float speed = navAgent.velocity.magnitude / moveSpeed;
            animator.SetFloat("Speed", speed);
            animator.SetBool("IsMoving", speed > 0.1f);
            // Debug.Log($"üé¨ [NAVMESH MOVEMENT] {gameObject.name} Animation updated - Speed: {speed:F2}, IsMoving: {speed > 0.1f}"); // T·∫ÆT
        }        
        // Debug.Log($"üèÅ [NAVMESH MOVEMENT] {gameObject.name} HandleNavMeshMovement() END"); // T·∫ÆT
    }
    
    /// <summary>
    /// Handle movement v·ªõi CharacterController (legacy)
    /// </summary>
    private void HandleCharacterControllerMovement()
    {
        Vector3 movement = moveDirection * moveSpeed * Time.deltaTime;
        
        // Add gravity
        if (!characterController.isGrounded)
        {
            movement.y += Physics.gravity.y * Time.deltaTime;
        }
        
        characterController.Move(movement);
        
        // Update animator
        if (animator != null)
        {
            float speed = moveDirection.magnitude;
            animator.SetFloat("Speed", speed);
            animator.SetBool("IsMoving", speed > 0.1f);
        }
    }
      /// <summary>
    /// Handle rotation toward target v·ªõi anti-loop protection
    /// </summary>
    private void HandleRotation()
    {
        if (currentTarget != null)
        {
            Vector3 directionToTarget = (currentTarget.transform.position - transform.position).normalized;
            directionToTarget.y = 0; // Keep rotation on Y axis only
            
            if (directionToTarget != Vector3.zero)
            {
                // üî• CRITICAL FIX: Ch·ªâ rotate khi ƒëang di chuy·ªÉn ho·∫∑c kho·∫£ng c√°ch ƒë·ªß xa
                float distanceToTarget = GetDistanceToTarget();
                bool shouldRotate = true;
                
                // N·∫øu 2 NPC qu√° g·∫ßn nhau v√† c√πng target v√†o nhau, t·∫°m d·ª´ng rotation ƒë·ªÉ tr√°nh loop
                if (distanceToTarget < attackRange * 1.2f)
                {
                    // Check xem target c√≥ ƒëang target ng∆∞·ª£c l·∫°i kh√¥ng
                    CombatController targetCombat = currentTarget.GetComponent<CombatController>();
                    if (targetCombat != null && targetCombat.CurrentTarget == teamMember)
                    {
                        // C·∫£ 2 ƒëang target nhau v√† qu√° g·∫ßn -> ch·ªâ cho NPC c√≥ instanceID th·∫•p h∆°n ƒë∆∞·ª£c rotate
                        shouldRotate = GetInstanceID() < currentTarget.GetInstanceID();
                        Debug.Log($"üîÑ [ROTATION ANTI-LOOP] {gameObject.name} shouldRotate = {shouldRotate} (vs {currentTarget.name})");
                    }
                }
                
                if (shouldRotate)
                {
                    Quaternion targetRotation = Quaternion.LookRotation(directionToTarget);
                    transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, rotationSpeed * Time.deltaTime);
                }
            }
        }
    }
    
    /// <summary>
    /// Get distance to current target
    /// </summary>
    private float GetDistanceToTarget()
    {
        if (currentTarget == null) return float.MaxValue;
        return Vector3.Distance(transform.position, currentTarget.transform.position);
    }
    
    /// <summary>
    /// Event handler for target changed
    /// </summary>
    private void OnTargetChanged(TeamMember newTarget)
    {
        TeamMember? previousTarget = currentTarget;
        currentTarget = newTarget;
        
        if (newTarget != null)
        {
            Debug.Log($"üéØ [COMBAT] {gameObject.name} CurrentTarget set to: {newTarget.name}");
            if (previousTarget != null && previousTarget != newTarget)
            {
                Debug.Log($"üîÑ [COMBAT] {gameObject.name} Target changed from {previousTarget.name} to {newTarget.name}");
            }
        }
        else
        {
            Debug.Log($"‚ùå [COMBAT] {gameObject.name} Target lost - currentTarget set to null");
            if (currentState != CombatState.Idle)
            {
                Debug.Log($"üõë [COMBAT] {gameObject.name} ExitCombat called - target lost/out of range");
                ChangeState(CombatState.Idle);
            }
        }
    }
    
    /// <summary>
    /// Event handler for death
    /// </summary>
    private void OnDeath(TeamMember deadMember)
    {
        ChangeState(CombatState.Idle);
        currentTarget = null;
        moveDirection = Vector3.zero;
        
        if (debugMode)
            Debug.Log($"{gameObject.name} died, stopping combat");
    }
      /// <summary>
    /// Set animation state
    /// </summary>
    private void SetAnimationState(string stateName)
    {
        if (animator == null) return;
        
        // T·∫ÆT ANIMATION LOGS - ch·ªâ focus v√†o detection/combat
        try
        {
            // Reset all state bools
            animator.SetBool("IsIdle", false);
            animator.SetBool("IsWalking", false);
            animator.SetBool("IsInCombat", false);
            
            // Set current state
            switch (stateName)
            {
                case "idle":
                    animator.SetBool("IsIdle", true);
                    break;
                case "walking":
                    animator.SetBool("IsWalking", true);
                    break;
                case "combat":
                    animator.SetBool("IsInCombat", true);
                    break;
            }
        }
        catch
        {
            // Silently ignore animation errors
        }
    }
      /// <summary>
    /// Get random attack trigger v·ªõi consecutive attack limitation
    /// </summary>
    private string GetRandomAttackTrigger()
    {
        string selectedTrigger;
        
        // N·∫øu ƒë√£ s·ª≠ d·ª•ng c√πng attack qu√° nhi·ªÅu l·∫ßn li√™n ti·∫øp, force ch·ªçn attack kh√°c
        if (consecutiveAttackCount >= maxConsecutiveAttacks && !string.IsNullOrEmpty(lastAttackUsed))
        {
            // T·∫°o list attack kh√°c (lo·∫°i b·ªè lastAttackUsed)
            var availableAttacks = new System.Collections.Generic.List<string>();
            foreach (string attack in attackTriggers)
            {
                if (attack != lastAttackUsed)
                {
                    availableAttacks.Add(attack);
                }
            }
            
            // Random ch·ªçn t·ª´ list attacks kh√°c
            int randomIndex = attackRandom.Next(availableAttacks.Count);
            selectedTrigger = availableAttacks[randomIndex];
            
            Debug.Log($"üîÑ [RANDOM ATTACK] {gameObject.name} FORCE CHANGE attack (consecutiveCount: {consecutiveAttackCount}) - t·ª´ '{lastAttackUsed}' sang '{selectedTrigger}'");
            
            // Reset consecutive count
            consecutiveAttackCount = 1;
        }
        else
        {
            // Random b√¨nh th∆∞·ªùng t·ª´ t·∫•t c·∫£ attacks
            int randomIndex = attackRandom.Next(attackTriggers.Length);
            selectedTrigger = attackTriggers[randomIndex];
            
            // Update consecutive count
            if (selectedTrigger == lastAttackUsed)
            {
                consecutiveAttackCount++;
            }
            else
            {
                consecutiveAttackCount = 1;
            }
            
            Debug.Log($"üé≤ [RANDOM ATTACK] {gameObject.name} RANDOM SELECT '{selectedTrigger}' (consecutiveCount: {consecutiveAttackCount})");
        }
        
        // Update lastAttackUsed
        lastAttackUsed = selectedTrigger;
        
        Debug.Log($"‚úÖ [RANDOM ATTACK] {gameObject.name} Selected: '{selectedTrigger}' | LastUsed: '{lastAttackUsed}' | ConsecutiveCount: {consecutiveAttackCount}");
        
        return selectedTrigger;
    }
    
    /// <summary>
    /// Trigger random attack animation thay th·∫ø cho SetAnimationTrigger("attack")
    /// </summary>
    private void TriggerAttackAnimation()
    {
        if (animator == null)
        {
            Debug.LogWarning($"‚ö†Ô∏è [RANDOM ATTACK] {gameObject.name} Animator is null - cannot trigger attack animation");
            return;
        }
        
        string attackTrigger = GetRandomAttackTrigger();
        
        Debug.Log($"üé¨ [RANDOM ATTACK] {gameObject.name} Triggering attack animation: '{attackTrigger}'");
        
        try
        {
            animator.SetTrigger(attackTrigger);
            Debug.Log($"‚úÖ [RANDOM ATTACK] {gameObject.name} Successfully triggered '{attackTrigger}' animation");
        }
        catch (System.Exception e)
        {
            Debug.LogError($"‚ùå [RANDOM ATTACK] {gameObject.name} Failed to trigger '{attackTrigger}' - Error: {e.Message}");
            
            // Fallback to basic "attack" trigger n·∫øu random attack fails
            try
            {
                animator.SetTrigger("attack");
                Debug.Log($"üîÑ [RANDOM ATTACK] {gameObject.name} FALLBACK to basic 'attack' trigger");
            }
            catch
            {
                Debug.LogError($"‚ùå [RANDOM ATTACK] {gameObject.name} Even fallback 'attack' trigger failed!");
            }
        }
    }

    /// <summary>
    /// Set animation trigger (legacy method, kept for compatibility)
    /// </summary>
    private void SetAnimationTrigger(string triggerName)
    {
        if (animator == null) return;
        
        try
        {
            animator.SetTrigger(triggerName);
        }
        catch
        {
            // Silently ignore animation errors
        }
    }
    
    /// <summary>
    /// Start combat with specific target - FIXED WITH DEBUG LOGS
    /// </summary>
    public void StartCombat(TeamMember target)
    {
        Debug.Log($"ü•ä [COMBAT] StartCombat() ƒë∆∞·ª£c g·ªçi cho {gameObject.name} v·ªõi target: {(target != null ? target.name : "null")}");
        
        if (target == null)
        {
            Debug.LogError($"‚ùå [COMBAT] {gameObject.name} StartCombat() v·ªõi null target!");
            return;
        }
        
        if (!target.IsAlive)
        {
            Debug.LogError($"üíÄ [COMBAT] {gameObject.name} StartCombat() v·ªõi dead target: {target.name}");
            return;
        }
        
        // Set target v√† change state
        currentTarget = target;
        Debug.Log($"‚úÖ [COMBAT] {gameObject.name} ƒë√£ set currentTarget = {target.name}");
        
        // Force state change
        ChangeState(CombatState.Engaging);
        Debug.Log($"üîÑ [COMBAT] {gameObject.name} ƒë√£ chuy·ªÉn sang CombatState.Engaging");
        
        // Verify state change
        if (currentState == CombatState.Engaging)
        {
            Debug.Log($"‚úÖ [COMBAT] {gameObject.name} COMBAT STATE ACTIVE v·ªõi target {target.name}");
        }
        else
        {
            Debug.LogError($"‚ùå [COMBAT] {gameObject.name} FAILED TO CHANGE TO COMBAT STATE! Current: {currentState}");
        }
    }
    
    /// <summary>
    /// Stop combat and return to idle
    /// </summary>
    public void StopCombat()
    {
        Debug.Log($"üõë [COMBAT] {gameObject.name} ExitCombat called - stopping combat");
        
        ChangeState(CombatState.Idle);
        currentTarget = null;
        
        Debug.Log($"üèÅ [COMBAT] {gameObject.name} Combat stopped - returned to idle state");
    }
    
    /// <summary>
    /// Force attack target (for testing)
    /// </summary>
    [ContextMenu("Force Attack Current Target")]
    public void ForceAttack()
    {
        if (currentTarget != null && !isAttacking)
        {
            StartCoroutine(PerformAttack());
        }
    }
    
    private void OnDestroy()
    {        // Unsubscribe from events safely
        try
        {
            if (enemyDetector != null)
                enemyDetector.OnTargetChanged -= OnTargetChanged;
            if (teamMember != null)
                teamMember.OnDeath -= OnDeath;
        }
        catch
        {
            // Ignore errors during cleanup
        }
    }
    
    /// <summary>
    /// Debug visualization
    /// </summary>
    private void OnDrawGizmosSelected()
    {
        if (!debugMode) return;
        
        // Attack range
        Gizmos.color = Color.red;
        Gizmos.DrawWireSphere(transform.position, attackRange);
        
        // Engage distance
        Gizmos.color = Color.yellow;
        Gizmos.DrawWireSphere(transform.position, engageDistance);
        
        // Move direction
        if (Application.isPlaying && moveDirection != Vector3.zero)
        {
            Gizmos.color = Color.green;
            Gizmos.DrawRay(transform.position, moveDirection * 2f);
        }
    }
}

/// <summary>
/// Enum cho combat states
/// </summary>
public enum CombatState
{
    Idle,
    Engaging,
    InCombat
}

/// <summary>
/// Enum cho combat behavior types
/// </summary>
public enum CombatBehaviorType
{
    Aggressive,
    Defensive, 
    Balanced
}
