using UnityEngine;
using UnityEngine.UI;
using UnityEngine.InputSystem;
using System.Collections.Generic;
using System.Linq;

namespace AnimalRevolt.UI
{
    /// <summary>
    /// Qu·∫£n l√Ω t·ªïng h·ª£p to√†n b·ªô UI trong game
    /// B·∫≠t t·∫Øt UI theo camera hi·ªán t·∫°i v√† ƒë·ªìng b·ªô to√†n b·ªô UI system
    /// </summary>
    public class UnifiedUIManager : MonoBehaviour
    {
        [Header("üéõÔ∏è UI System Settings")]
        [SerializeField, Tooltip("Ph√≠m t·∫Øt ƒë·ªÉ toggle to√†n b·ªô UI")]
        private InputAction toggleAllUIAction = new InputAction("ToggleAllUI", InputActionType.Button, "<Keyboard>/f1");
        
        [SerializeField, Tooltip("Ph√≠m t·∫Øt ƒë·ªÉ toggle UI camera hi·ªán t·∫°i")]
        private InputAction toggleCameraUIAction = new InputAction("ToggleCameraUI", InputActionType.Button, "<Keyboard>/f2");
        
        [SerializeField, Tooltip("T·ª± ƒë·ªông t√¨m v√† qu·∫£n l√Ω t·∫•t c·∫£ UI")]
        private bool autoDiscoverUI = true;
        
        [SerializeField, Tooltip("Hi·ªÉn th·ªã UI khi start")]
        private bool showUIOnStart = false;

        [Header("üì± UI Toggle Button")]
        [SerializeField, Tooltip("V·ªã tr√≠ n√∫t toggle")]
        private RectTransform.Edge buttonPosition = RectTransform.Edge.Top;
        
        [SerializeField, Tooltip("K√≠ch th∆∞·ªõc n√∫t")]
        private Vector2 buttonSize = new Vector2(60, 60);
        
        [SerializeField, Tooltip("Offset t·ª´ g√≥c")]
        private Vector2 buttonOffset = new Vector2(20, 20);

        [Header("üé® UI Styling")]
        [SerializeField, Tooltip("Icon cho n√∫t toggle")]
        private Sprite toggleIcon;
        
        [SerializeField, Tooltip("M√†u khi UI b·∫≠t")]
        private Color activeColor = new Color(0.2f, 0.8f, 0.2f, 0.8f);
        
        [SerializeField, Tooltip("M√†u khi UI t·∫Øt")]
        private Color inactiveColor = new Color(0.5f, 0.5f, 0.5f, 0.6f);

        [Header("üìπ Camera Integration")]
        [SerializeField, Tooltip("Camera Manager reference")]
        private AnimalRevolt.Camera.CameraManager cameraManager;
        
        [SerializeField, Tooltip("Theo d√µi thay ƒë·ªïi camera t·ª± ƒë·ªông")]
        private bool autoTrackCameraChanges = true;

        // UI State Management
        private bool allUIVisible = false;
        private bool currentCameraUIVisible = false;
        private int lastActiveCameraIndex = -1;

        // UI Components Registry
        private Dictionary<string, List<MonoBehaviour>> uiComponentsByCategory;
        private Dictionary<int, List<MonoBehaviour>> uiComponentsByCamera;
        private List<MonoBehaviour> globalUIComponents;

        // UI Toggle Button
        private Canvas toggleCanvas;
        private Button toggleButton;
        private Image buttonImage;

        // UI Categories
        private const string CAMERA_UI_CATEGORY = "CameraUI";
        private const string RAGDOLL_UI_CATEGORY = "RagdollUI";  
        private const string COMBAT_UI_CATEGORY = "CombatUI";
        private const string HEALTH_UI_CATEGORY = "HealthUI";
        private const string CHARACTER_UI_CATEGORY = "CharacterUI";
        private const string GAME_UI_CATEGORY = "GameUI";

        private void Awake()
        {
            InitializeUISystem();
            CreateToggleButton();
        }

        private void Start()
        {
            if (autoDiscoverUI)
            {
                DiscoverAllUIComponents();
            }

            // Thi·∫øt l·∫≠p tr·∫°ng th√°i ban ƒë·∫ßu
            SetAllUIVisibility(showUIOnStart);
            
            // Enable input actions
            toggleAllUIAction.Enable();
            toggleCameraUIAction.Enable();

            Debug.Log("üéõÔ∏è UnifiedUIManager ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng");
        }

        private void Update()
        {
            // X·ª≠ l√Ω input
            HandleInputActions();
            
            // Theo d√µi thay ƒë·ªïi camera
            if (autoTrackCameraChanges)
            {
                TrackCameraChanges();
            }
        }

        /// <summary>
        /// Kh·ªüi t·∫°o h·ªá th·ªëng UI
        /// </summary>
        private void InitializeUISystem()
        {
            uiComponentsByCategory = new Dictionary<string, List<MonoBehaviour>>();
            uiComponentsByCamera = new Dictionary<int, List<MonoBehaviour>>();
            globalUIComponents = new List<MonoBehaviour>();

            // Kh·ªüi t·∫°o categories
            string[] categories = { CAMERA_UI_CATEGORY, RAGDOLL_UI_CATEGORY, COMBAT_UI_CATEGORY, 
                                   HEALTH_UI_CATEGORY, CHARACTER_UI_CATEGORY, GAME_UI_CATEGORY };
            
            foreach (string category in categories)
            {
                uiComponentsByCategory[category] = new List<MonoBehaviour>();
            }

            // T√¨m CameraManager n·∫øu ch∆∞a c√≥
            if (cameraManager == null)
            {
                cameraManager = FindFirstObjectByType<AnimalRevolt.Camera.CameraManager>();
            }
        }

        /// <summary>
        /// T·∫°o n√∫t toggle UI
        /// </summary>
        private void CreateToggleButton()
        {
            // T·∫°o Canvas
            GameObject canvasObj = new GameObject("UnifiedUIToggleCanvas");
            toggleCanvas = canvasObj.AddComponent<Canvas>();
            toggleCanvas.renderMode = RenderMode.ScreenSpaceOverlay;
            toggleCanvas.sortingOrder = 9999; // Tr√™n c√πng
            
            canvasObj.AddComponent<CanvasScaler>();
            canvasObj.AddComponent<GraphicRaycaster>();

            // T·∫°o n√∫t toggle
            GameObject buttonObj = new GameObject("UnifiedToggleButton");
            buttonObj.transform.SetParent(toggleCanvas.transform, false);

            // Setup Image
            buttonImage = buttonObj.AddComponent<Image>();
            buttonImage.sprite = toggleIcon;
            buttonImage.color = inactiveColor;

            // Setup Button
            toggleButton = buttonObj.AddComponent<Button>();
            toggleButton.onClick.AddListener(ToggleAllUI);

            // Setup position
            SetupButtonPosition(buttonObj.GetComponent<RectTransform>());
        }

        /// <summary>
        /// Thi·∫øt l·∫≠p v·ªã tr√≠ n√∫t
        /// </summary>
        private void SetupButtonPosition(RectTransform rectTransform)
        {
            rectTransform.sizeDelta = buttonSize;

            switch (buttonPosition)
            {
                case RectTransform.Edge.Top:
                    rectTransform.anchorMin = new Vector2(1f, 1f);
                    rectTransform.anchorMax = new Vector2(1f, 1f);
                    rectTransform.anchoredPosition = new Vector2(-buttonOffset.x, -buttonOffset.y);
                    break;
                case RectTransform.Edge.Bottom:
                    rectTransform.anchorMin = new Vector2(1f, 0f);
                    rectTransform.anchorMax = new Vector2(1f, 0f);
                    rectTransform.anchoredPosition = new Vector2(-buttonOffset.x, buttonOffset.y);
                    break;
                case RectTransform.Edge.Left:
                    rectTransform.anchorMin = new Vector2(0f, 1f);
                    rectTransform.anchorMax = new Vector2(0f, 1f);
                    rectTransform.anchoredPosition = new Vector2(buttonOffset.x, -buttonOffset.y);
                    break;
                case RectTransform.Edge.Right:
                    rectTransform.anchorMin = new Vector2(1f, 1f);
                    rectTransform.anchorMax = new Vector2(1f, 1f);
                    rectTransform.anchoredPosition = new Vector2(-buttonOffset.x, -buttonOffset.y);
                    break;
            }
        }

        /// <summary>
        /// T·ª± ƒë·ªông t√¨m t·∫•t c·∫£ UI components
        /// </summary>
        private void DiscoverAllUIComponents()
        {
            Debug.Log("üîç B·∫Øt ƒë·∫ßu t√¨m ki·∫øm t·∫•t c·∫£ UI components...");

            // Clear existing
            foreach (var category in uiComponentsByCategory.Keys.ToList())
            {
                uiComponentsByCategory[category].Clear();
            }
            uiComponentsByCamera.Clear();
            globalUIComponents.Clear();

            // T√¨m Camera UI
            RegisterCameraUIComponents();
            
            // T√¨m Ragdoll UI
            RegisterRagdollUIComponents();
            
            // T√¨m Combat UI
            RegisterCombatUIComponents();
            
            // T√¨m Health UI
            RegisterHealthUIComponents();
            
            // T√¨m Character UI
            RegisterCharacterUIComponents();
            
            // T√¨m Game UI
            RegisterGameUIComponents();

            LogDiscoveredComponents();
        }

        /// <summary>
        /// ƒêƒÉng k√Ω Camera UI components
        /// </summary>
        private void RegisterCameraUIComponents()
        {
            // CameraSettingsUI
            CameraSettingsUI[] cameraUIs = FindObjectsByType<CameraSettingsUI>(FindObjectsSortMode.None);
            foreach (var ui in cameraUIs)
            {
                RegisterUIComponent(ui, CAMERA_UI_CATEGORY, -1); // Global camera UI
            }

            // NPCCamera UIs (n·∫øu c√≥)
            // C√≥ th·ªÉ m·ªü r·ªông th√™m c√°c camera UI kh√°c
        }

        /// <summary>
        /// ƒêƒÉng k√Ω Ragdoll UI components
        /// </summary>
        private void RegisterRagdollUIComponents()
        {            // RagdollPhysicsController (th∆∞·ªùng kh√¥ng c√≥ UI tr·ª±c ti·∫øp, nh∆∞ng c√≥ th·ªÉ c√≥ debug UI)
            RagdollPhysicsController[] ragdollControllers = FindObjectsByType<RagdollPhysicsController>(FindObjectsSortMode.None);
            foreach (var controller in ragdollControllers)
            {
                // ƒêƒÉng k√Ω l√†m UI component n·∫øu c√≥ UI elements
                RegisterUIComponent(controller, RAGDOLL_UI_CATEGORY);
            }
        }

        /// <summary>
        /// ƒêƒÉng k√Ω Combat UI components
        /// </summary>
        private void RegisterCombatUIComponents()
        {
            // C√≥ th·ªÉ c√≥ combat UI trong t∆∞∆°ng lai
            // Placeholder cho combat UI components
        }

        /// <summary>
        /// ƒêƒÉng k√Ω Health UI components
        /// </summary>
        private void RegisterHealthUIComponents()
        {
            HealthBar[] healthBars = FindObjectsByType<HealthBar>(FindObjectsSortMode.None);
            foreach (var healthBar in healthBars)
            {
                RegisterUIComponent(healthBar, HEALTH_UI_CATEGORY);
            }

            DamageNumberSpawner[] damageSpawners = FindObjectsByType<DamageNumberSpawner>(FindObjectsSortMode.None);
            foreach (var spawner in damageSpawners)
            {
                RegisterUIComponent(spawner, HEALTH_UI_CATEGORY);
            }
        }

        /// <summary>
        /// ƒêƒÉng k√Ω Character UI components
        /// </summary>
        private void RegisterCharacterUIComponents()
        {
            AnimalRevolt.UI.CharacterSelectionUI[] charSelectionUIs = FindObjectsByType<AnimalRevolt.UI.CharacterSelectionUI>(FindObjectsSortMode.None);
            foreach (var ui in charSelectionUIs)
            {
                RegisterUIComponent(ui, CHARACTER_UI_CATEGORY);
                Debug.Log($"üìù ƒê√£ ƒëƒÉng k√Ω CharacterSelectionUI: {ui.name}");
            }
        }

        /// <summary>
        /// ƒêƒÉng k√Ω Game UI components
        /// </summary>
        private void RegisterGameUIComponents()
        {
            // TestCameraUI v√† c√°c UI kh√°c
            TestCameraUI[] testUIs = FindObjectsByType<TestCameraUI>(FindObjectsSortMode.None);
            foreach (var ui in testUIs)
            {
                RegisterUIComponent(ui, GAME_UI_CATEGORY);
            }

            // C√°c UI kh√°c c·ªßa game
        }

        /// <summary>
        /// ƒêƒÉng k√Ω UI component v√†o h·ªá th·ªëng
        /// </summary>
        public void RegisterUIComponent(MonoBehaviour component, string category, int cameraIndex = -1)
        {
            if (component == null) return;

            // ƒêƒÉng k√Ω theo category
            if (uiComponentsByCategory.ContainsKey(category))
            {
                if (!uiComponentsByCategory[category].Contains(component))
                {
                    uiComponentsByCategory[category].Add(component);
                }
            }

            // ƒêƒÉng k√Ω theo camera
            if (cameraIndex >= 0)
            {
                if (!uiComponentsByCamera.ContainsKey(cameraIndex))
                {
                    uiComponentsByCamera[cameraIndex] = new List<MonoBehaviour>();
                }
                if (!uiComponentsByCamera[cameraIndex].Contains(component))
                {
                    uiComponentsByCamera[cameraIndex].Add(component);
                }
            }
            else
            {
                // Global UI
                if (!globalUIComponents.Contains(component))
                {
                    globalUIComponents.Add(component);
                }
            }
        }

        /// <summary>
        /// X·ª≠ l√Ω input actions
        /// </summary>
        private void HandleInputActions()
        {
            if (toggleAllUIAction.WasPressedThisFrame())
            {
                ToggleAllUI();
            }

            if (toggleCameraUIAction.WasPressedThisFrame())
            {
                ToggleCurrentCameraUI();
            }
        }

        /// <summary>
        /// Theo d√µi thay ƒë·ªïi camera
        /// </summary>
        private void TrackCameraChanges()
        {
            if (cameraManager == null) return;

            int currentCameraIndex = cameraManager.LayChiSoCameraHienTai();
            if (currentCameraIndex != lastActiveCameraIndex)
            {
                OnCameraChanged(lastActiveCameraIndex, currentCameraIndex);
                lastActiveCameraIndex = currentCameraIndex;
            }
        }

        /// <summary>
        /// X·ª≠ l√Ω khi camera thay ƒë·ªïi
        /// </summary>
        private void OnCameraChanged(int oldCameraIndex, int newCameraIndex)
        {
            Debug.Log($"üìπ Camera changed: {oldCameraIndex} ‚Üí {newCameraIndex}");

            // ·∫®n UI c·ªßa camera c≈©
            if (oldCameraIndex >= 0 && uiComponentsByCamera.ContainsKey(oldCameraIndex))
            {
                SetCameraUIVisibility(oldCameraIndex, false);
            }

            // Hi·ªán UI c·ªßa camera m·ªõi n·∫øu ƒëang b·∫≠t
            if (currentCameraUIVisible && newCameraIndex >= 0 && uiComponentsByCamera.ContainsKey(newCameraIndex))
            {
                SetCameraUIVisibility(newCameraIndex, true);
            }
        }

        /// <summary>
        /// Toggle to√†n b·ªô UI
        /// </summary>
        [ContextMenu("üéõÔ∏è Toggle All UI")]
        public void ToggleAllUI()
        {
            allUIVisible = !allUIVisible;
            SetAllUIVisibility(allUIVisible);
            
            Debug.Log($"üéõÔ∏è Toggle All UI: {(allUIVisible ? "B·∫¨T" : "T·∫ÆT")}");
        }

        /// <summary>
        /// Toggle UI camera hi·ªán t·∫°i
        /// </summary>
        [ContextMenu("üìπ Toggle Current Camera UI")]
        public void ToggleCurrentCameraUI()
        {
            currentCameraUIVisible = !currentCameraUIVisible;
            
            int currentCamera = cameraManager != null ? cameraManager.LayChiSoCameraHienTai() : 0;
            SetCameraUIVisibility(currentCamera, currentCameraUIVisible);
            
            Debug.Log($"üìπ Toggle Camera {currentCamera} UI: {(currentCameraUIVisible ? "B·∫¨T" : "T·∫ÆT")}");
        }

        /// <summary>
        /// ƒê·∫∑t hi·ªÉn th·ªã to√†n b·ªô UI
        /// </summary>
        public void SetAllUIVisibility(bool visible)
        {
            allUIVisible = visible;
            
            // C·∫≠p nh·∫≠t m√†u n√∫t
            if (buttonImage != null)
            {
                buttonImage.color = visible ? activeColor : inactiveColor;
            }

            // Global UI
            SetGlobalUIVisibility(visible);
            
            // Category UI
            foreach (var category in uiComponentsByCategory.Keys)
            {
                SetCategoryUIVisibility(category, visible);
            }
            
            // Camera UI
            foreach (var cameraIndex in uiComponentsByCamera.Keys)
            {
                SetCameraUIVisibility(cameraIndex, visible);
            }
        }

        /// <summary>
        /// ƒê·∫∑t hi·ªÉn th·ªã UI theo category
        /// </summary>
        public void SetCategoryUIVisibility(string category, bool visible)
        {
            if (!uiComponentsByCategory.ContainsKey(category)) return;

            foreach (var component in uiComponentsByCategory[category])
            {
                SetComponentVisibility(component, visible);
            }
        }

        /// <summary>
        /// ƒê·∫∑t hi·ªÉn th·ªã UI theo camera
        /// </summary>
        public void SetCameraUIVisibility(int cameraIndex, bool visible)
        {
            if (!uiComponentsByCamera.ContainsKey(cameraIndex)) return;

            foreach (var component in uiComponentsByCamera[cameraIndex])
            {
                SetComponentVisibility(component, visible);
            }
        }

        /// <summary>
        /// ƒê·∫∑t hi·ªÉn th·ªã Global UI
        /// </summary>
        public void SetGlobalUIVisibility(bool visible)
        {
            foreach (var component in globalUIComponents)
            {
                SetComponentVisibility(component, visible);
            }
        }

        /// <summary>
        /// ƒê·∫∑t hi·ªÉn th·ªã cho component c·ª• th·ªÉ
        /// </summary>
        private void SetComponentVisibility(MonoBehaviour component, bool visible)
        {
            if (component == null) return;

            // X·ª≠ l√Ω c√°c lo·∫°i UI component kh√°c nhau
            if (component is CameraSettingsUI cameraUI)
            {
                cameraUI.DatHienThiUI(visible);
            }
            else if (component is HealthBar healthBar)
            {
                healthBar.gameObject.SetActive(visible);
            }
            else if (component is AnimalRevolt.UI.CharacterSelectionUI charUI)
            {
                charUI.SetUIVisibility(visible);
            }
            else if (component is RagdollPhysicsController ragdollUI)
            {
                ragdollUI.gameObject.SetActive(visible);
            }
            else if (component is DamageNumberSpawner damageSpawner)
            {
                damageSpawner.gameObject.SetActive(visible);
            }
            else if (component.gameObject != null)
            {
                // Generic GameObject activation
                component.gameObject.SetActive(visible);
            }
        }

        /// <summary>
        /// Log th√¥ng tin components ƒë√£ t√¨m th·∫•y
        /// </summary>
        private void LogDiscoveredComponents()
        {
            Debug.Log("üìä === UI COMPONENTS DISCOVERED ===");
            
            foreach (var category in uiComponentsByCategory)
            {
                if (category.Value.Count > 0)
                {
                    Debug.Log($"üìÇ {category.Key}: {category.Value.Count} components");
                }
            }
            
            Debug.Log($"üåç Global UI: {globalUIComponents.Count} components");
            Debug.Log($"üìπ Camera UI: {uiComponentsByCamera.Count} camera groups");
        }

        /// <summary>
        /// Refresh v√† t√¨m l·∫°i t·∫•t c·∫£ UI
        /// </summary>
        [ContextMenu("üîÑ Refresh All UI")]
        public void RefreshAllUI()
        {
            DiscoverAllUIComponents();
            Debug.Log("üîÑ ƒê√£ refresh t·∫•t c·∫£ UI components");
        }

        /// <summary>
        /// L·∫•y tr·∫°ng th√°i hi·ªÉn th·ªã UI
        /// </summary>
        public bool IsAllUIVisible() => allUIVisible;
        public bool IsCurrentCameraUIVisible() => currentCameraUIVisible;

        /// <summary>
        /// ƒê·∫∑t v·ªã tr√≠ n√∫t toggle
        /// </summary>
        public void SetButtonPosition(RectTransform.Edge position, Vector2 offset)
        {
            buttonPosition = position;
            buttonOffset = offset;
            
            if (toggleButton != null)
            {
                SetupButtonPosition(toggleButton.GetComponent<RectTransform>());
            }
        }

        private void OnDestroy()
        {
            toggleAllUIAction?.Dispose();
            toggleCameraUIAction?.Dispose();
        }

        #region Public API

        /// <summary>
        /// B·∫≠t to√†n b·ªô UI
        /// </summary>
        public void ShowAllUI() => SetAllUIVisibility(true);

        /// <summary>
        /// T·∫Øt to√†n b·ªô UI
        /// </summary>
        public void HideAllUI() => SetAllUIVisibility(false);

        /// <summary>
        /// B·∫≠t UI category c·ª• th·ªÉ
        /// </summary>
        public void ShowCategoryUI(string category) => SetCategoryUIVisibility(category, true);

        /// <summary>
        /// T·∫Øt UI category c·ª• th·ªÉ
        /// </summary>
        public void HideCategoryUI(string category) => SetCategoryUIVisibility(category, false);

        /// <summary>
        /// B·∫≠t UI camera c·ª• th·ªÉ
        /// </summary>
        public void ShowCameraUI(int cameraIndex) => SetCameraUIVisibility(cameraIndex, true);

        /// <summary>
        /// T·∫Øt UI camera c·ª• th·ªÉ
        /// </summary>
        public void HideCameraUI(int cameraIndex) => SetCameraUIVisibility(cameraIndex, false);

        #endregion
    }
}