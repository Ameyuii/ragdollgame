using UnityEngine;
using UnityEngine.UI;
using UnityEngine.InputSystem;

namespace AnimalRevolt.UI
{
    /// <summary>
    /// Qu·∫£n l√Ω toggle UI cho to√†n b·ªô h·ªá th·ªëng - Legacy Version
    /// ƒê∆∞·ª£c thay th·∫ø b·ªüi UnifiedUIManager cho ch·ª©c nƒÉng m·ªü r·ªông
    /// V·∫´n gi·ªØ ƒë·ªÉ backward compatibility
    /// </summary>
    [System.Obsolete("S·ª≠ d·ª•ng UnifiedUIManager thay v√¨ UIToggleManager ƒë·ªÉ c√≥ ch·ª©c nƒÉng m·ªü r·ªông h∆°n")]
    public class UIToggleManager : MonoBehaviour
    {
        [Header("‚ö†Ô∏è LEGACY WARNING")]
        [SerializeField, Tooltip("Script n√†y ƒë√£ ƒë∆∞·ª£c thay th·∫ø b·ªüi UnifiedUIManager")]
        private bool showLegacyWarning = true;
        
        [Header("üéõÔ∏è UI Toggle Settings")]
        [SerializeField, Tooltip("Ph√≠m t·∫Øt ƒë·ªÉ toggle UI")]
        private InputAction toggleUIAction = new InputAction("ToggleUI", InputActionType.Button, "<Keyboard>/f1");
        
        [SerializeField, Tooltip("V·ªã tr√≠ n√∫t toggle (g√≥c m√†n h√¨nh)")]
        private RectTransform.Edge viTriNutToggle = RectTransform.Edge.Top;
        
        [SerializeField, Tooltip("K√≠ch th∆∞·ªõc n√∫t toggle")]
        private Vector2 kichThuocNut = new Vector2(60, 60);
        
        [SerializeField, Tooltip("Kho·∫£ng c√°ch t·ª´ g√≥c m√†n h√¨nh")]
        private Vector2 offsetTuGoc = new Vector2(20, 20);

        [Header("üì± UI References")]
        [SerializeField, Tooltip("Canvas ch·ª©a UI toggle")]
        private Canvas uiCanvas;
        
        [SerializeField, Tooltip("Panel ch·ª©a t·∫•t c·∫£ UI c√≥ th·ªÉ toggle")]
        private GameObject uiPanel;
        
        [SerializeField, Tooltip("CameraSettingsUI component")]
        private CameraSettingsUI cameraSettingsUI;
        
        [Header("üÜï Unified UI Integration")]
        [SerializeField, Tooltip("UnifiedUIManager ƒë·ªÉ qu·∫£n l√Ω UI t·ªïng h·ª£p")]
        private UnifiedUIManager unifiedUIManager;
        
        [SerializeField, Tooltip("T·ª± ƒë·ªông chuy·ªÉn sang UnifiedUIManager")]
        private bool autoMigrateToUnified = true;

        [Header("üé® UI Styling")]
        [SerializeField, Tooltip("Icon cho n√∫t camera")]
        private Sprite iconCamera;
        
        [SerializeField, Tooltip("M√†u n√∫t khi UI ƒëang b·∫≠t")]
        private Color mauNutBat = new Color(0.2f, 0.8f, 0.2f, 0.8f);
        
        [SerializeField, Tooltip("M√†u n√∫t khi UI ƒëang t·∫Øt")]
        private Color mauNutTat = new Color(0.5f, 0.5f, 0.5f, 0.6f);

        // UI Components
        private Button nutToggle;
        private Image hinhAnhNut;
        private bool dangHienThiUI = false;
        
        // UI Panel List
        private CameraSettingsUI[] danhSachCameraUI;
        
        // Migration flag
        private bool hasMigrated = false;

        private void Awake()
        {
            // Hi·ªÉn th·ªã c·∫£nh b√°o legacy
            if (showLegacyWarning)
            {
                Debug.LogWarning("‚ö†Ô∏è UIToggleManager is LEGACY! Use UnifiedUIManager for enhanced functionality");
            }
            
            // Ki·ªÉm tra migration
            if (autoMigrateToUnified)
            {
                TryMigrateToUnified();
            }
            
            if (!hasMigrated)
            {
                TaoUIToggle();
                TimCacUIComponent();
            }
        }

        private void Start()
        {
            if (hasMigrated) return;
            
            // Enable input action
            toggleUIAction.Enable();
            
            // Thi·∫øt l·∫≠p ban ƒë·∫ßu
            CapNhatTrangThaiUI(false);
            
            Debug.Log("üéõÔ∏è UIToggleManager ƒë√£ kh·ªüi t·∫°o (Legacy Mode)");
        }
private void Update()
{
    if (hasMigrated) return;
    
    // X·ª≠ l√Ω ph√≠m t·∫Øt
    if (toggleUIAction.WasPressedThisFrame())
    {
        ToggleAllUI();
    }
}

/// <summary>
/// Th·ª≠ migration sang UnifiedUIManager
/// </summary>
private void TryMigrateToUnified()
{
    // T√¨m UnifiedUIManager trong scene
    if (unifiedUIManager == null)
    {
        unifiedUIManager = FindFirstObjectByType<UnifiedUIManager>();
    }
    
    // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi
    if (unifiedUIManager == null && autoMigrateToUnified)
    {
        GameObject unifiedObj = new GameObject("UnifiedUIManager");
        unifiedUIManager = unifiedObj.AddComponent<UnifiedUIManager>();
        
        Debug.Log("üÜï ƒê√£ t·∫°o UnifiedUIManager m·ªõi ƒë·ªÉ thay th·∫ø UIToggleManager");
    }
    
    if (unifiedUIManager != null)
    {
        hasMigrated = true;
        Debug.Log("‚úÖ Migration th√†nh c√¥ng sang UnifiedUIManager");
        
        // Disable legacy components
        if (nutToggle != null)
            nutToggle.gameObject.SetActive(false);
    }
}

        /// <summary>
        /// T·∫°o n√∫t toggle UI ·ªü g√≥c m√†n h√¨nh
        /// </summary>
        private void TaoUIToggle()
        {
            // T·∫°o Canvas n·∫øu ch∆∞a c√≥
            if (uiCanvas == null)
            {
                GameObject canvasObj = new GameObject("UIToggleCanvas");
                uiCanvas = canvasObj.AddComponent<Canvas>();
                uiCanvas.renderMode = RenderMode.ScreenSpaceOverlay;
                uiCanvas.sortingOrder = 1000; // Hi·ªÉn th·ªã tr√™n c√πng
                
                canvasObj.AddComponent<CanvasScaler>();
                canvasObj.AddComponent<GraphicRaycaster>();
            }

            // T·∫°o n√∫t toggle
            GameObject nutObj = new GameObject("ToggleUIButton");
            nutObj.transform.SetParent(uiCanvas.transform, false);
            
            // Th√™m Image component
            hinhAnhNut = nutObj.AddComponent<Image>();
            hinhAnhNut.sprite = iconCamera;
            hinhAnhNut.color = mauNutTat;
            
            // Th√™m Button component
            nutToggle = nutObj.AddComponent<Button>();
            nutToggle.onClick.AddListener(ToggleAllUI);
            
            // Thi·∫øt l·∫≠p RectTransform
            RectTransform rectTransform = nutObj.GetComponent<RectTransform>();
            ThietLapViTriNut(rectTransform);
        }

        /// <summary>
        /// Thi·∫øt l·∫≠p v·ªã tr√≠ n√∫t theo g√≥c m√†n h√¨nh
        /// </summary>
        private void ThietLapViTriNut(RectTransform rectTransform)
        {
            rectTransform.sizeDelta = kichThuocNut;
            
            switch (viTriNutToggle)
            {
                case RectTransform.Edge.Top:
                    // G√≥c tr√™n-ph·∫£i
                    rectTransform.anchorMin = new Vector2(1f, 1f);
                    rectTransform.anchorMax = new Vector2(1f, 1f);
                    rectTransform.anchoredPosition = new Vector2(-offsetTuGoc.x, -offsetTuGoc.y);
                    break;
                    
                case RectTransform.Edge.Bottom:
                    // G√≥c d∆∞·ªõi-ph·∫£i
                    rectTransform.anchorMin = new Vector2(1f, 0f);
                    rectTransform.anchorMax = new Vector2(1f, 0f);
                    rectTransform.anchoredPosition = new Vector2(-offsetTuGoc.x, offsetTuGoc.y);
                    break;
                    
                case RectTransform.Edge.Left:
                    // G√≥c tr√™n-tr√°i
                    rectTransform.anchorMin = new Vector2(0f, 1f);
                    rectTransform.anchorMax = new Vector2(0f, 1f);
                    rectTransform.anchoredPosition = new Vector2(offsetTuGoc.x, -offsetTuGoc.y);
                    break;
                    
                case RectTransform.Edge.Right:
                    // G√≥c tr√™n-ph·∫£i (m·∫∑c ƒë·ªãnh)
                    rectTransform.anchorMin = new Vector2(1f, 1f);
                    rectTransform.anchorMax = new Vector2(1f, 1f);
                    rectTransform.anchoredPosition = new Vector2(-offsetTuGoc.x, -offsetTuGoc.y);
                    break;
            }
        }

        /// <summary>
        /// T√¨m c√°c UI component trong scene
        /// </summary>
        private void TimCacUIComponent()
        {
            // T√¨m CameraSettingsUI
            if (cameraSettingsUI == null)
            {
                cameraSettingsUI = FindFirstObjectByType<CameraSettingsUI>();
            }
            
            // T√¨m t·∫•t c·∫£ Camera UI trong scene
            danhSachCameraUI = FindObjectsByType<CameraSettingsUI>(FindObjectsSortMode.None);
            
            Debug.Log($"üì± T√¨m th·∫•y {danhSachCameraUI.Length} CameraSettingsUI component(s)");
        }

        /// <summary>
        /// Toggle t·∫•t c·∫£ UI - Delegate sang UnifiedUIManager n·∫øu c√≥
        /// </summary>
        public void ToggleAllUI()
        {
            if (hasMigrated && unifiedUIManager != null)
            {
                unifiedUIManager.ToggleAllUI();
                return;
            }
            
            dangHienThiUI = !dangHienThiUI;
            CapNhatTrangThaiUI(dangHienThiUI);
            
            Debug.Log($"üéõÔ∏è Toggle All UI (Legacy): {(dangHienThiUI ? "B·∫¨T" : "T·∫ÆT")}");
        }

        /// <summary>
        /// C·∫≠p nh·∫≠t tr·∫°ng th√°i hi·ªÉn th·ªã c·ªßa t·∫•t c·∫£ UI
        /// </summary>
        private void CapNhatTrangThaiUI(bool hienThi)
        {
            // C·∫≠p nh·∫≠t m√†u n√∫t
            if (hinhAnhNut != null)
            {
                hinhAnhNut.color = hienThi ? mauNutBat : mauNutTat;
            }

            // Toggle UI Panel n·∫øu c√≥
            if (uiPanel != null)
            {
                uiPanel.SetActive(hienThi);
            }

            // Toggle Camera Settings UI
            if (cameraSettingsUI != null)
            {
                cameraSettingsUI.DatHienThiUI(hienThi);
            }

            // Toggle t·∫•t c·∫£ Camera UI kh√°c
            foreach (var cameraUI in danhSachCameraUI)
            {
                if (cameraUI != null && cameraUI != cameraSettingsUI)
                {
                    cameraUI.DatHienThiUI(hienThi);
                }
            }
        }

        /// <summary>
        /// B·∫≠t UI
        /// </summary>
        public void BatUI()
        {
            dangHienThiUI = true;
            CapNhatTrangThaiUI(true);
        }

        /// <summary>
        /// T·∫Øt UI
        /// </summary>
        public void TatUI()
        {
            dangHienThiUI = false;
            CapNhatTrangThaiUI(false);
        }

        /// <summary>
        /// Th√™m UI component v√†o danh s√°ch qu·∫£n l√Ω
        /// </summary>
        public void ThemUIComponent(GameObject uiComponent)
        {
            if (uiPanel == null)
            {
                // T·∫°o UI Panel ƒë·ªÉ ch·ª©a c√°c UI component
                GameObject panelObj = new GameObject("ManagedUIPanel");
                panelObj.transform.SetParent(uiCanvas.transform, false);
                uiPanel = panelObj;
            }
            
            if (uiComponent != null)
            {
                uiComponent.transform.SetParent(uiPanel.transform, false);
            }
        }

        /// <summary>
        /// Thi·∫øt l·∫≠p ph√≠m t·∫Øt m·ªõi
        /// </summary>
        public void DatPhimTat(string keyBinding)
        {
            toggleUIAction.Dispose();
            toggleUIAction = new InputAction("ToggleUI", InputActionType.Button, keyBinding);
            toggleUIAction.Enable();
        }

        /// <summary>
        /// Thi·∫øt l·∫≠p v·ªã tr√≠ n√∫t
        /// </summary>
        public void DatViTriNut(RectTransform.Edge viTri, Vector2 offset)
        {
            viTriNutToggle = viTri;
            offsetTuGoc = offset;
            
            if (nutToggle != null)
            {
                ThietLapViTriNut(nutToggle.GetComponent<RectTransform>());
            }
        }

        /// <summary>
        /// L·∫•y tr·∫°ng th√°i hi·ªÉn th·ªã UI
        /// </summary>
        public bool DangHienThiUI()
        {
            return dangHienThiUI;
        }

        private void OnDestroy()
        {
            // Dispose Input Action
            toggleUIAction?.Dispose();
        }

        #region Context Menu Actions

        [ContextMenu("üéõÔ∏è Toggle UI")]
        public void DebugToggleUI()
        {
            ToggleAllUI();
        }

        [ContextMenu("üì± Refresh UI Components")]
        public void DebugRefreshComponents()
        {
            TimCacUIComponent();
        }

        [ContextMenu("üîß Setup Default Position")]
        public void DebugSetupDefaultPosition()
        {
            DatViTriNut(RectTransform.Edge.Top, new Vector2(20, 20));
        }
        
        [ContextMenu("üÜï Migrate to UnifiedUIManager")]
        public void DebugMigrateToUnified()
        {
            autoMigrateToUnified = true;
            TryMigrateToUnified();
        }
        
        [ContextMenu("üìä Show Migration Status")]
        public void DebugShowMigrationStatus()
        {
            Debug.Log($"=== UIToggleManager Migration Status ===");
            Debug.Log($"üîÑ Has Migrated: {hasMigrated}");
            Debug.Log($"üÜï UnifiedUIManager: {(unifiedUIManager != null ? "‚úÖ Found" : "‚ùå Not Found")}");
            Debug.Log($"‚öôÔ∏è Auto Migrate: {autoMigrateToUnified}");
            
            if (!hasMigrated)
            {
                Debug.Log("üí° Tip: Enable 'Auto Migrate To Unified' ho·∫∑c ch·∫°y 'Migrate to UnifiedUIManager'");
            }
        }

        #endregion
    }
}