using UnityEngine;
using UnityEngine.InputSystem;

/// <summary>
/// Controller cho camera ch√≠nh c√≥ th·ªÉ di chuy·ªÉn t·ª± do trong kh√¥ng gian 3D
/// H·ªó tr·ª£ di chuy·ªÉn b·∫±ng WASD + QE v√† xoay b·∫±ng chu·ªôt
/// </summary>
public class CameraController : MonoBehaviour
{
    [Header("C·∫•u h√¨nh di chuy·ªÉn")]
    [SerializeField, Tooltip("T·ªëc ƒë·ªô di chuy·ªÉn camera")]
    private float tocDoChuyenDong = 10f;

    [SerializeField, Tooltip("T·ªëc ƒë·ªô di chuy·ªÉn nhanh (khi gi·ªØ Shift)")]
    private float tocDoChuyenDongNhanh = 20f;    [SerializeField, Tooltip("T·ªëc ƒë·ªô l√™n xu·ªëng (Q/E)")]
    private float tocDoLenXuong = 5f;

    [Header("C·∫•u h√¨nh xoay")]
    [SerializeField, Tooltip("T·ªëc ƒë·ªô xoay camera ch√≠nh (ƒë·ªô/gi√¢y)")]
    private float tocDoXoayCamera = 150f; // TƒÉng t·ª´ 120f ƒë·ªÉ consistent v·ªõi NPC camera

    [SerializeField, Tooltip("Nh√¢n t·ªëc ƒë·ªô xoay nhanh khi gi·ªØ Shift")]
    private float nhanTocDoXoayNhanh = 2.5f; // TƒÉng t·ª´ 2f ƒë·ªÉ consistent v·ªõi NPC camera

    [SerializeField, Tooltip("ƒê·ªô nh·∫°y xoay chu·ªôt")]
    private float doNhayChuot = 3f; // TƒÉng t·ª´ 2f ƒë·ªÉ consistent

    [SerializeField, Tooltip("Gi·ªõi h·∫°n g√≥c xoay l√™n xu·ªëng")]
    private float gioiHanGocXoay = 90f;

    [SerializeField, Tooltip("L√†m m·ªÅm chuy·ªÉn ƒë·ªông")]
    private float doDaiLamMem = 0.1f;

    // Bi·∫øn qu·∫£n l√Ω input
    private Vector2 inputDiChuyen;
    private Vector2 inputXoayChuot;
    private bool inputLenCao;
    private bool inputXuongThap;
    private bool inputChuyenDongNhanh;

    // Bi·∫øn qu·∫£n l√Ω xoay
    private float gocXoayX = 0f;
    private float gocXoayY = 0f;

    // Bi·∫øn l√†m m·ªÅm chuy·ªÉn ƒë·ªông
    private Vector3 vanTocHienTai;
    private Vector3 vanTocLamMem;

    /// <summary>
    /// Kh·ªüi t·∫°o g√≥c xoay ban ƒë·∫ßu
    /// </summary>
    private void Start()
    {
        // L·∫•y g√≥c xoay hi·ªán t·∫°i c·ªßa camera
        Vector3 gocXoayHienTai = transform.eulerAngles;
        gocXoayY = gocXoayHienTai.y;
        gocXoayX = gocXoayHienTai.x;

        // Chuy·ªÉn ƒë·ªïi g√≥c X v·ªÅ kho·∫£ng -90 ƒë·∫øn 90
        if (gocXoayX > 180f)
            gocXoayX -= 360f;
    }

    /// <summary>
    /// C·∫≠p nh·∫≠t chuy·ªÉn ƒë·ªông v√† xoay camera
    /// </summary>
    private void Update()
    {
        // Ch·ªâ x·ª≠ l√Ω khi component n√†y ƒë∆∞·ª£c k√≠ch ho·∫°t
        if (!enabled) return;

        XuLyXoayCamera();
        XuLyDiChuyenCamera();
    }    /// <summary>
    /// X·ª≠ l√Ω xoay camera b·∫±ng chu·ªôt (ch·ªâ khi gi·ªØ chu·ªôt ph·∫£i)
    /// </summary>
    private void XuLyXoayCamera()
    {
        if (Mouse.current == null) return;        // Ch·ªâ xoay khi gi·ªØ chu·ªôt ph·∫£i
        if (Mouse.current.rightButton.isPressed)
        {
            // L·∫•y input xoay chu·ªôt
            Vector2 deltaXoayChuot = Mouse.current.delta.ReadValue();

            // Ki·ªÉm tra tƒÉng t·ªëc xoay b·∫±ng Shift
            float tocDoXoayHienTai = tocDoXoayCamera;
            if (Keyboard.current != null && Keyboard.current.leftShiftKey.isPressed)
            {
                tocDoXoayHienTai *= nhanTocDoXoayNhanh;
                Debug.Log($"üöÄ Boost t·ªëc ƒë·ªô xoay camera ch√≠nh: {tocDoXoayHienTai}¬∞/s");
            }

            // C·∫≠p nh·∫≠t g√≥c xoay v·ªõi t·ªëc ƒë·ªô t√πy ch·ªânh (tƒÉng multiplier cho responsive h∆°n)
            gocXoayX -= deltaXoayChuot.y * doNhayChuot * tocDoXoayHienTai * Time.deltaTime * 0.015f; // TƒÉng t·ª´ 0.01f
            gocXoayY += deltaXoayChuot.x * doNhayChuot * tocDoXoayHienTai * Time.deltaTime * 0.015f; // TƒÉng t·ª´ 0.01f

            // Gi·ªõi h·∫°n g√≥c xoay l√™n xu·ªëng
            gocXoayX = Mathf.Clamp(gocXoayX, -gioiHanGocXoay, gioiHanGocXoay);

            // √Åp d·ª•ng xoay
            transform.rotation = Quaternion.Euler(gocXoayX, gocXoayY, 0f);
        }
    }

    /// <summary>
    /// X·ª≠ l√Ω di chuy·ªÉn camera
    /// </summary>
    private void XuLyDiChuyenCamera()
    {
        if (Keyboard.current == null) return;

        // L·∫•y input di chuy·ªÉn
        Vector2 inputWASD = Vector2.zero;
        if (Keyboard.current.wKey.isPressed) inputWASD.y += 1f;
        if (Keyboard.current.sKey.isPressed) inputWASD.y -= 1f;
        if (Keyboard.current.aKey.isPressed) inputWASD.x -= 1f;
        if (Keyboard.current.dKey.isPressed) inputWASD.x += 1f;

        // L·∫•y input l√™n xu·ªëng
        float inputLenXuong = 0f;
        if (Keyboard.current.qKey.isPressed) inputLenXuong += 1f;
        if (Keyboard.current.eKey.isPressed) inputLenXuong -= 1f;

        // Ki·ªÉm tra chuy·ªÉn ƒë·ªông nhanh
        bool chuyenDongNhanh = Keyboard.current.leftShiftKey.isPressed;

        // T√≠nh to√°n h∆∞·ªõng di chuy·ªÉn
        Vector3 huongDiChuyen = Vector3.zero;

        // Di chuy·ªÉn theo h∆∞·ªõng camera nh√¨n (kh√¥ng b·ªã ·∫£nh h∆∞·ªüng b·ªüi g√≥c l√™n xu·ªëng)
        Vector3 huongTruoc = new Vector3(transform.forward.x, 0, transform.forward.z).normalized;
        Vector3 huongPhai = transform.right;

        huongDiChuyen += huongTruoc * inputWASD.y;
        huongDiChuyen += huongPhai * inputWASD.x;
        huongDiChuyen += Vector3.up * inputLenXuong;

        // T√≠nh t·ªëc ƒë·ªô di chuy·ªÉn
        float tocDoHienTai = chuyenDongNhanh ? tocDoChuyenDongNhanh : tocDoChuyenDong;
        if (inputLenXuong != 0f)
        {
            // S·ª≠ d·ª•ng t·ªëc ƒë·ªô ri√™ng cho l√™n xu·ªëng
            Vector3 vanTocLenXuong = Vector3.up * inputLenXuong * tocDoLenXuong;
            Vector3 vanTocNgang = new Vector3(huongDiChuyen.x, 0, huongDiChuyen.z) * tocDoHienTai;
            huongDiChuyen = vanTocNgang + vanTocLenXuong;
        }
        else
        {
            huongDiChuyen *= tocDoHienTai;
        }

        // L√†m m·ªÅm chuy·ªÉn ƒë·ªông
        vanTocHienTai = Vector3.SmoothDamp(vanTocHienTai, huongDiChuyen, ref vanTocLamMem, doDaiLamMem);

        // √Åp d·ª•ng di chuy·ªÉn
        transform.position += vanTocHienTai * Time.deltaTime;
    }

    /// <summary>
    /// ƒê·∫∑t l·∫°i v·ªã tr√≠ v√† g√≥c xoay camera
    /// </summary>
    /// <param name="viTriMoi">V·ªã tr√≠ m·ªõi</param>
    /// <param name="gocXoayMoi">G√≥c xoay m·ªõi</param>
    public void DatLaiViTriCamera(Vector3 viTriMoi, Vector3 gocXoayMoi)
    {
        transform.position = viTriMoi;
        transform.rotation = Quaternion.Euler(gocXoayMoi);
        
        // C·∫≠p nh·∫≠t bi·∫øn g√≥c xoay n·ªôi b·ªô
        gocXoayY = gocXoayMoi.y;
        gocXoayX = gocXoayMoi.x;
        
        // Reset velocity
        vanTocHienTai = Vector3.zero;
        vanTocLamMem = Vector3.zero;
    }

    /// <summary>
    /// B·∫≠t/t·∫Øt ƒëi·ªÅu khi·ªÉn camera
    /// </summary>
    /// <param name="kichHoat">Tr·∫°ng th√°i k√≠ch ho·∫°t</param>
    public void BatTatDieuKhien(bool kichHoat)
    {
        enabled = kichHoat;
        
        // Reset input khi t·∫Øt
        if (!kichHoat)
        {
            vanTocHienTai = Vector3.zero;
            vanTocLamMem = Vector3.zero;
        }
    }

    /// <summary>
    /// ƒê·∫∑t t·ªëc ƒë·ªô xoay camera
    /// </summary>
    /// <param name="tocDoMoi">T·ªëc ƒë·ªô xoay m·ªõi (ƒë·ªô/gi√¢y)</param>
    public void DatTocDoXoay(float tocDoMoi)
    {
        tocDoXoayCamera = Mathf.Max(0f, tocDoMoi);
    }

    /// <summary>
    /// L·∫•y t·ªëc ƒë·ªô xoay camera hi·ªán t·∫°i
    /// </summary>
    /// <returns>T·ªëc ƒë·ªô xoay hi·ªán t·∫°i</returns>
    public float LayTocDoXoay()
    {
        return tocDoXoayCamera;
    }

    /// <summary>
    /// ƒê·∫∑t ƒë·ªô nh·∫°y chu·ªôt
    /// </summary>
    /// <param name="doNhayMoi">ƒê·ªô nh·∫°y m·ªõi</param>
    public void DatDoNhayChuot(float doNhayMoi)
    {
        doNhayChuot = Mathf.Max(0f, doNhayMoi);
    }

    /// <summary>
    /// L·∫•y ƒë·ªô nh·∫°y chu·ªôt hi·ªán t·∫°i
    /// </summary>
    /// <returns>ƒê·ªô nh·∫°y chu·ªôt hi·ªán t·∫°i</returns>
    public float LayDoNhayChuot()
    {
        return doNhayChuot;
    }

    /// <summary>
    /// ƒê·∫∑t t·ªëc ƒë·ªô di chuy·ªÉn
    /// </summary>
    /// <param name="tocDoMoi">T·ªëc ƒë·ªô di chuy·ªÉn m·ªõi</param>
    public void DatTocDoChuyenDong(float tocDoMoi)
    {
        tocDoChuyenDong = Mathf.Max(0f, tocDoMoi);
    }

    /// <summary>
    /// L·∫•y t·ªëc ƒë·ªô di chuy·ªÉn hi·ªán t·∫°i
    /// </summary>
    /// <returns>T·ªëc ƒë·ªô di chuy·ªÉn hi·ªán t·∫°i</returns>
    public float LayTocDoChuyenDong()
    {
        return tocDoChuyenDong;
    }

    /// <summary>
    /// ƒê·∫∑t nh√¢n t·ªëc ƒë·ªô xoay nhanh (khi gi·ªØ Shift)
    /// </summary>
    /// <param name="nhanMoi">Nh√¢n t·ªëc ƒë·ªô m·ªõi</param>
    public void DatNhanTocDoXoayNhanh(float nhanMoi)
    {
        nhanTocDoXoayNhanh = Mathf.Max(1f, nhanMoi);
    }

    /// <summary>
    /// L·∫•y nh√¢n t·ªëc ƒë·ªô xoay nhanh hi·ªán t·∫°i
    /// </summary>
    /// <returns>Nh√¢n t·ªëc ƒë·ªô xoay nhanh</returns>
    public float LayNhanTocDoXoayNhanh()
    {
        return nhanTocDoXoayNhanh;
    }
}
