using UnityEngine;
using UnityEditor;

/// <summary>
/// Editor script ƒë·ªÉ thi·∫øt l·∫≠p h·ªá th·ªëng camera n√¢ng cao m·ªôt c√°ch t·ª± ƒë·ªông
/// Menu: Tools/Camera System/Setup Enhanced Camera System
/// </summary>
public static class CameraSystemSetup
{
    [MenuItem("Tools/Camera System/Setup Enhanced Camera System")]
    public static void SetupEnhancedCameraSystem()
    {
        Debug.Log("üöÄ B·∫Øt ƒë·∫ßu thi·∫øt l·∫≠p h·ªá th·ªëng camera n√¢ng cao...");
        
        bool hasChanges = false;
        
        // 1. Thi·∫øt l·∫≠p Main Camera
        Camera mainCamera = Camera.main;
        if (mainCamera == null)
        {
            Debug.LogError("‚ùå Kh√¥ng t√¨m th·∫•y Main Camera! Vui l√≤ng t·∫°o camera v·ªõi tag MainCamera.");
            return;
        }
        
        // Th√™m CameraController n·∫øu ch∆∞a c√≥
        var cameraController = mainCamera.GetComponent<CameraController>();
        if (cameraController == null)
        {
            mainCamera.gameObject.AddComponent<CameraController>();
            Debug.Log("‚úÖ ƒê√£ th√™m CameraController v√†o Main Camera");
            hasChanges = true;
        }
        
        // 2. Thi·∫øt l·∫≠p QuanLyCamera
        QuanLyCamera quanLyCamera = Object.FindFirstObjectByType<QuanLyCamera>();
        if (quanLyCamera == null)
        {
            GameObject cameraManager = new GameObject("CameraManager");
            quanLyCamera = cameraManager.AddComponent<QuanLyCamera>();
            Debug.Log("‚úÖ ƒê√£ t·∫°o CameraManager v·ªõi QuanLyCamera");
            hasChanges = true;
        }
          // 3. Thi·∫øt l·∫≠p TestCameraSystem
        var testSystemType = System.Type.GetType("TestCameraSystem");
        if (testSystemType != null)
        {
            var testSystem = Object.FindFirstObjectByType(testSystemType) as MonoBehaviour;
            if (testSystem == null)
            {
                GameObject testObject = new GameObject("CameraSystemTester");
                testObject.AddComponent(testSystemType);
                Debug.Log("‚úÖ ƒê√£ t·∫°o CameraSystemTester");
                hasChanges = true;
            }
        }
        
        // 4. Ki·ªÉm tra Input System
        CheckInputSystem();
        
        // 5. T·∫°o NPC test n·∫øu kh√¥ng c√≥ NPC n√†o
        NPCCamera[] existingNPCs = Object.FindObjectsByType<NPCCamera>(FindObjectsSortMode.None);
        if (existingNPCs.Length == 0)
        {
            if (EditorUtility.DisplayDialog("T·∫°o NPC Test", 
                "Kh√¥ng t√¨m th·∫•y NPC n√†o c√≥ NPCCamera. B·∫°n c√≥ mu·ªën t·∫°o NPC test kh√¥ng?", 
                "C√≥", "Kh√¥ng"))
            {
                CreateTestNPC();
                hasChanges = true;
            }
        }
        
        if (hasChanges)
        {
            EditorUtility.SetDirty(quanLyCamera);
            Debug.Log("üéâ Thi·∫øt l·∫≠p h·ªá th·ªëng camera ho√†n t·∫•t!");
            Debug.Log("üìö Xem file CAMERA_SYSTEM_ENHANCED_GUIDE.md ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt");
        }
        else
        {
            Debug.Log("‚ÑπÔ∏è H·ªá th·ªëng camera ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p s·∫µn");
        }
        
        // Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
        ShowSetupGuide();
    }
    
    [MenuItem("Tools/Camera System/Create Test NPC")]
    public static void CreateTestNPC()
    {
        // T·∫°o NPC test
        GameObject npc = new GameObject("NPC_Test");
        npc.transform.position = new Vector3(5, 0, 5);
        
        // Th√™m visual
        GameObject visual = GameObject.CreatePrimitive(PrimitiveType.Cube);
        visual.transform.SetParent(npc.transform);
        visual.transform.localPosition = Vector3.up * 0.5f;
        visual.name = "Visual";
        
        // Th√™m NPCCamera
        npc.AddComponent<NPCCamera>();
        
        // Th√™m NPCController n·∫øu c√≥
        var npcControllerType = System.Type.GetType("NPCController");
        if (npcControllerType != null)
        {
            npc.AddComponent(npcControllerType);
        }
        
        Selection.activeGameObject = npc;
        Debug.Log("‚úÖ ƒê√£ t·∫°o NPC test t·∫°i v·ªã tr√≠ (5, 0, 5)");
    }
    
    [MenuItem("Tools/Camera System/Validate Camera System")]
    public static void ValidateCameraSystem()
    {
        Debug.Log("üîç Ki·ªÉm tra h·ªá th·ªëng camera...");
        
        // Ki·ªÉm tra Main Camera
        Camera mainCamera = Camera.main;
        if (mainCamera == null)
        {
            Debug.LogError("‚ùå Kh√¥ng t√¨m th·∫•y Main Camera");
            return;
        }
        
        var cameraController = mainCamera.GetComponent<CameraController>();
        if (cameraController == null)
        {
            Debug.LogWarning("‚ö†Ô∏è Main Camera ch∆∞a c√≥ CameraController");
        }
        else
        {
            Debug.Log("‚úÖ Main Camera c√≥ CameraController");
        }
        
        // Ki·ªÉm tra QuanLyCamera
        QuanLyCamera quanLyCamera = Object.FindFirstObjectByType<QuanLyCamera>();
        if (quanLyCamera == null)
        {
            Debug.LogWarning("‚ö†Ô∏è Ch∆∞a c√≥ QuanLyCamera trong scene");
        }
        else
        {
            Debug.Log("‚úÖ QuanLyCamera ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p");
        }
        
        // Ki·ªÉm tra NPCCamera
        NPCCamera[] npcCameras = Object.FindObjectsByType<NPCCamera>(FindObjectsSortMode.None);
        if (npcCameras.Length == 0)
        {
            Debug.LogWarning("‚ö†Ô∏è Kh√¥ng c√≥ NPCCamera n√†o trong scene");
        }
        else
        {
            Debug.Log($"‚úÖ T√¨m th·∫•y {npcCameras.Length} NPCCamera");
        }
        
        // Ki·ªÉm tra AudioListener
        AudioListener[] audioListeners = Object.FindObjectsByType<AudioListener>(FindObjectsSortMode.None);
        int enabledCount = 0;
        foreach (var listener in audioListeners)
        {
            if (listener.enabled) enabledCount++;
        }
        
        if (enabledCount > 1)
        {
            Debug.LogWarning($"‚ö†Ô∏è C√≥ {enabledCount} AudioListener ƒëang ho·∫°t ƒë·ªông (n√™n ch·ªâ c√≥ 1)");
        }
        else if (enabledCount == 1)
        {
            Debug.Log("‚úÖ AudioListener ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng");
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è Kh√¥ng c√≥ AudioListener n√†o ho·∫°t ƒë·ªông");
        }
        
        Debug.Log("üîç Ki·ªÉm tra ho√†n t·∫•t");
    }
    
    private static void CheckInputSystem()
    {
        // Ki·ªÉm tra Input System package
        var inputSystemType = System.Type.GetType("UnityEngine.InputSystem.InputSystem, Unity.InputSystem");
        if (inputSystemType == null)
        {
            Debug.LogWarning("‚ö†Ô∏è Unity Input System ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t");
            Debug.Log("üí° C√†i ƒë·∫∑t qua Package Manager: Window > Package Manager > Unity Registry > Input System");
        }
        else
        {
            Debug.Log("‚úÖ Unity Input System ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t");
        }
        
        // Ki·ªÉm tra Input Actions file
        string[] guids = AssetDatabase.FindAssets("InputSystem_Actions t:InputActionAsset");
        if (guids.Length == 0)
        {
            Debug.LogWarning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y InputSystem_Actions.inputactions");
        }
        else
        {
            Debug.Log("‚úÖ InputSystem_Actions.inputactions ƒë√£ t·ªìn t·∫°i");
        }
    }
    
    private static void ShowSetupGuide()
    {
        bool showGuide = EditorUtility.DisplayDialog(
            "H·ªá th·ªëng Camera ƒë√£ s·∫µn s√†ng!", 
            "Thi·∫øt l·∫≠p ho√†n t·∫•t! B·∫°n c√≥ mu·ªën xem h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng kh√¥ng?",
            "Xem h∆∞·ªõng d·∫´n", 
            "ƒê√≥ng"
        );
        
        if (showGuide)
        {
            string guidePath = "Assets/CAMERA_SYSTEM_ENHANCED_GUIDE.md";
            var guide = AssetDatabase.LoadAssetAtPath<TextAsset>(guidePath);
            if (guide != null)
            {
                Selection.activeObject = guide;
                EditorGUIUtility.PingObject(guide);
            }
            else
            {
                Debug.Log("üìö Xem file CAMERA_SYSTEM_ENHANCED_GUIDE.md ƒë·ªÉ bi·∫øt h∆∞·ªõng d·∫´n chi ti·∫øt");
            }
        }
    }
}
