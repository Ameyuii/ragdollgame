using UnityEngine;
using UnityEngine.AI;
using System.Collections;

/// <summary>
/// Base class cho t·∫•t c·∫£ NPCs trong game
/// Ch·ª©a c√°c ch·ª©c nƒÉng c∆° b·∫£n: di chuy·ªÉn, t·∫•n c√¥ng, AI
/// Sao ch√©p ch·ª©c nƒÉng t·ª´ NPCController c≈©
/// H·ªó tr·ª£ CharacterData ScriptableObject ƒë·ªÉ d·ªÖ d√†ng t·∫°o nh√¢n v·∫≠t m·ªõi
/// </summary>
public abstract class NPCBaseController : MonoBehaviour
{
    [Header("Character Data")]
    [Tooltip("ScriptableObject ch·ª©a th√¥ng tin v√† stats c·ªßa nh√¢n v·∫≠t")]
    [SerializeField] protected CharacterData? characterData;
    
    [Header("Thu·ªôc t√≠nh c∆° b·∫£n (S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ CharacterData)")]
    [Tooltip("M√°u t·ªëi ƒëa c·ªßa nh√¢n v·∫≠t")]
    public float maxHealth = 100f;
    
    [Tooltip("M√°u hi·ªán t·∫°i c·ªßa nh√¢n v·∫≠t")]
    [SerializeField] protected float currentHealth;
    
    [Tooltip("ID c·ªßa team (nh√¢n v·∫≠t kh√°c team s·∫Ω t·∫•n c√¥ng nhau)")]
    public int team = 0;
    
    [Header("Thi·∫øt l·∫≠p di chuy·ªÉn")]
    [Tooltip("T·ªëc ƒë·ªô di chuy·ªÉn c·ªßa nh√¢n v·∫≠t")]
    public float moveSpeed = 3.5f;
    
    [Tooltip("T·ªëc ƒë·ªô xoay c·ªßa nh√¢n v·∫≠t (ƒë·ªô/gi√¢y)")]
    public float rotationSpeed = 120f;
    
    [Tooltip("T·ªëc ƒë·ªô tƒÉng t·ªëc")]
    public float acceleration = 8f;
    
    [Header("Thi·∫øt l·∫≠p t·∫•n c√¥ng")]
    [Tooltip("S√°t th∆∞∆°ng m·ªói ƒë√≤n t·∫•n c√¥ng")]
    public float attackDamage = 20f;
    
    [Tooltip("Th·ªùi gian h·ªìi chi√™u (gi√¢y)")]
    public float attackCooldown = 1f;
    
    [Tooltip("T·∫ßm ƒë√°nh (m)")]
    public float attackRange = 2f;
    
    [Tooltip("Th·ªùi gian animation attack (gi√¢y)")]
    public float attackAnimationDuration = 1.0f;
    
    [Tooltip("Timing hit trong animation (0.0-1.0)")]
    [Range(0.1f, 0.9f)]
    public float attackHitTiming = 0.65f;
    
    [Header("Thi·∫øt l·∫≠p AI")]
    [Tooltip("Kho·∫£ng c√°ch ph√°t hi·ªán k·∫ª ƒë·ªãch (m)")]
    public float detectionRange = 30f;
    
    [Tooltip("Layer ch·ª©a k·∫ª ƒë·ªãch")]
    public LayerMask enemyLayerMask;
    
    [Tooltip("Layer ch·ª©a ch∆∞·ªõng ng·∫°i v·∫≠t")]
    public LayerMask obstacleLayerMask;
    
    [Header("Physics Impact Settings")]
    [Tooltip("L·ª±c ƒë·∫©y khi t·∫•n c√¥ng (impact force)")]
    public float impactForce = 25f;
    
    [Tooltip("L·ª±c knockback khi b·ªã t·∫•n c√¥ng")]
    public float knockbackForce = 150f;
    
    [Tooltip("L·ª±c n√¢ng l√™n (upward force) khi knockback")]
    public float knockbackUpwardForce = 50f;
    
    [Tooltip("Kho·∫£ng c√°ch t·ªëi ƒëa ƒë·ªÉ c√≥ physics impact")]
    public float maxImpactDistance = 2.5f;
    
    [Header("Hi·ªáu ·ª©ng")]
    [Tooltip("Hi·ªáu ·ª©ng khi b·ªã ƒë√°nh")]
    public GameObject hitEffect;
    
    [Tooltip("Hi·ªáu ·ª©ng khi ch·∫øt")]
    public GameObject deathEffect;
    
    [Header("Debug Options")]
    [Tooltip("Hi·ªÉn th·ªã th√¥ng tin debug chi ti·∫øt")]
    public bool showDebugLogs = true;
    
    [Header("Attack Variation Settings")]
    [Tooltip("T·ª∑ l·ªá s·ª≠ d·ª•ng attack th√¥ng th∆∞·ªùng (%)")]
    [Range(0f, 100f)]
    public float basicAttackChance = 40f;
    
    [Tooltip("T·ª∑ l·ªá s·ª≠ d·ª•ng attack1 (%)")]
    [Range(0f, 100f)]
    public float attack1Chance = 30f;
    
    [Tooltip("T·ª∑ l·ªá s·ª≠ d·ª•ng attack2 (%)")]
    [Range(0f, 100f)]
    public float attack2Chance = 30f;
    
    [Header("Advanced Attack Settings")]
    [Tooltip("C√≥ s·ª≠ d·ª•ng cooldown kh√°c nhau cho t·ª´ng lo·∫°i attack kh√¥ng")]
    public bool useVariableAttackCooldown = false;
    
    [Tooltip("Cooldown cho attack1")]
    public float attack1Cooldown = 1.2f;
    
    [Tooltip("Cooldown cho attack2")]
    public float attack2Cooldown = 1.5f;
    
    [Header("Ragdoll Reaction Settings")]
    [Tooltip("C√≥ k√≠ch ho·∫°t ragdoll m·ªói khi b·ªã ƒë√°nh kh√¥ng")]
    public bool enableRagdollOnHit = true;
    
    [Tooltip("Cooldown gi·ªØa c√°c l·∫ßn k√≠ch ho·∫°t ragdoll (gi√¢y)")]
    public float ragdollCooldown = 1f;
    
    [Tooltip("S√°t th∆∞∆°ng t·ªëi thi·ªÉu ƒë·ªÉ k√≠ch ho·∫°t ragdoll")]
    public float minDamageForRagdoll = 10f;
    
    [Header("Hit Reaction Settings")]
    [Tooltip("Ng∆∞·ª°ng l·ª±c t·ªëi thi·ªÉu ƒë·ªÉ k√≠ch ho·∫°t ragdoll (d∆∞·ªõi m·ª©c n√†y ch·ªâ c√≥ hit reaction)")]
    public float ragdollForceThreshold = 100f;
    
    [Tooltip("C√≥ th·ªÉ ph·∫£n c√¥ng ngay l·∫≠p t·ª©c khi b·ªã ƒë√°nh nh·∫π kh√¥ng")]
    public bool canCounterAttack = true;
    
    [Tooltip("Th·ªùi gian cooldown cho counter attack (gi√¢y)")]
    public float counterAttackCooldown = 0.5f;
    
    [Tooltip("T·ª∑ l·ªá damage cho counter attack (% c·ªßa damage b√¨nh th∆∞·ªùng)")]
    [Range(0.5f, 2f)]
    public float counterAttackDamageMultiplier = 1.2f;
    
    // Bi·∫øn theo d√µi tr·∫°ng th√°i
    protected float lastAttackTime;
    protected float lastRagdollTime; // Th·ªùi gian ragdoll cu·ªëi c√πng
    protected float lastCounterAttackTime; // Th·ªùi gian counter attack cu·ªëi c√πng
    protected bool hasDealtDamageThisAttack = false; // ƒê√£ g√¢y s√°t th∆∞∆°ng cho ƒë√≤n t·∫•n c√¥ng hi·ªán t·∫°i ch∆∞a
    protected bool isDead = false;
    protected NPCBaseController targetEnemy;
    protected NPCBaseController currentAttackTarget;
    protected bool isMoving = false;
    
    // Bi·∫øn ƒë·ªÉ x·ª≠ l√Ω smooth transition v√† tr√°nh tr∆∞·ª£t
    protected bool isTransitioning = false;
    protected float transitionStartTime = 0f;
    protected float transitionDuration = 0.3f;
    protected Vector3 lastFramePosition;
    protected bool hasStartedMoving = false;
    protected bool isInitialized = false;
    
    // Tham chi·∫øu c√°c th√†nh ph·∫ßn
    protected Animator animator;
    protected NavMeshAgent navMeshAgent;
    
    // T√™n c√°c tham s·ªë animator
    protected static readonly string ANIM_IS_WALKING = "IsWalking";
    protected static readonly string ANIM_ATTACK = "Attack";
    protected static readonly string ANIM_ATTACK1 = "Attack1";
    protected static readonly string ANIM_ATTACK2 = "Attack2";
    protected static readonly string ANIM_HIT = "Hit";
    protected static readonly string ANIM_DIE = "Die";
    
    // Bi·∫øn theo d√µi lo·∫°i attack cu·ªëi c√πng
    protected string lastUsedAttackTrigger = "";
    
    /// <summary>
    /// Property ƒë·ªÉ c√°c class con truy c·∫≠p CharacterData
    /// </summary>
    public CharacterData? CharacterData => characterData;
    
    /// <summary>
    /// C·∫≠p nh·∫≠t Inspector values t·ª´ CharacterData (g·ªçi trong Editor)
    /// </summary>
    [ContextMenu("üîÑ Update From CharacterData")]
    public virtual void UpdateFromCharacterData()
    {
        if (characterData != null)
        {
            // Backup current health percentage
            float healthPercentage = maxHealth > 0 ? currentHealth / maxHealth : 1f;
            
            // Apply CharacterData stats
            ApplyCharacterData();
            
            // Restore health percentage
            currentHealth = maxHealth * healthPercentage;
            
            Debug.Log($"üîÑ {gameObject.name}: Inspector ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ CharacterData '{characterData.characterName}'");
            
            #if UNITY_EDITOR
            // Mark object as dirty ƒë·ªÉ Unity bi·∫øt c√≥ thay ƒë·ªïi
            UnityEditor.EditorUtility.SetDirty(this);
            #endif
        }
        else
        {
            Debug.LogWarning($"‚ö†Ô∏è {gameObject.name}: Kh√¥ng c√≥ CharacterData ƒë·ªÉ c·∫≠p nh·∫≠t!");
        }
    }
    
    /// <summary>
    /// Validation khi CharacterData thay ƒë·ªïi trong Inspector
    /// </summary>
    protected virtual void OnValidate()
    {
        // Ch·ªâ ch·∫°y trong Editor v√† khi game kh√¥ng ƒëang ch·∫°y
        #if UNITY_EDITOR
        if (!Application.isPlaying && characterData != null)
        {
            // Delay ƒë·ªÉ tr√°nh l·ªói khi Unity ƒëang serialize
            UnityEditor.EditorApplication.delayCall += () =>
            {
                if (this != null && characterData != null)
                {
                    UpdateFromCharacterData();
                }
            };
        }
        #endif
    }
    
    protected virtual void Awake()
    {
        animator = GetComponent<Animator>();
        navMeshAgent = GetComponent<NavMeshAgent>();
    }
    
    protected virtual void Start()
    {
        // Apply CharacterData n·∫øu c√≥
        ApplyCharacterData();
        
        // Kh·ªüi t·∫°o m√°u
        currentHealth = maxHealth;
        
        // Thi·∫øt l·∫≠p NavMeshAgent
        InitializeNavMeshAgent();
        
        // Thi·∫øt l·∫≠p layer mask n·∫øu ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p
        if (enemyLayerMask.value == 0)
        {
            enemyLayerMask = -1; // All layers
            if (showDebugLogs) Debug.Log($"‚ö†Ô∏è {gameObject.name}: Auto-set enemyLayerMask to ALL LAYERS");
        }
        
        if (obstacleLayerMask.value == 0)
        {
            obstacleLayerMask = LayerMask.GetMask("Default");
        }
        
        // Validate v√† normalize t·ª∑ l·ªá attack
        ValidateAttackChances();
        
        // L∆∞u tr·∫°ng th√°i kh·ªüi t·∫°o
        isInitialized = true;
        
        // Log th√¥ng tin team ƒë·ªÉ debug
        if (showDebugLogs) Debug.Log($"{gameObject.name}: ƒê√£ kh·ªüi t·∫°o v·ªõi team {team}");
        
        // B·∫Øt ƒë·∫ßu t√¨m ki·∫øm k·∫ª ƒë·ªãch
        StartCoroutine(FindEnemyRoutine());
        
        // B·∫Øt ƒë·∫ßu patrol n·∫øu kh√¥ng c√≥ m·ª•c ti√™u
        StartCoroutine(PatrolWhenIdle());
        
        // Kh·ªüi t·∫°o v·ªã tr√≠ theo d√µi
        lastFramePosition = transform.position;
    }
      protected virtual void Update()
    {
        if (isDead || !isInitialized) return;
        
        // T√¨m k·∫ª ƒë·ªãch trong ph·∫°m vi
        FindEnemyInRange();
        
        // N·∫øu c√≥ m·ª•c ti√™u th√¨ t·∫•n c√¥ng khi trong t·∫ßm
        if (targetEnemy != null && !targetEnemy.IsDead())
        {
            float distanceToTarget = Vector3.Distance(transform.position, targetEnemy.transform.position);
            
            if (distanceToTarget <= attackRange)
            {
                // D·ª´ng di chuy·ªÉn tr∆∞·ªõc ti√™n ƒë·ªÉ tr√°nh tr∆∞·ª£t
                StopMoving();
                
                // Xoay v·ªÅ ph√≠a m·ª•c ti√™u
                RotateTowards(targetEnemy.transform.position);
                
                // T·∫•n c√¥ng n·∫øu c√≥ th·ªÉ
                if (CanAttack())
                {
                    Attack(targetEnemy);
                }
            }
            else
            {
                // Di chuy·ªÉn ƒë·∫øn m·ª•c ti√™u v·ªõi transition smooth
                MoveToTarget(targetEnemy.transform.position);
            }
        }
    }
    
    protected virtual void InitializeNavMeshAgent()
    {
        if (navMeshAgent != null)
        {
            navMeshAgent.speed = moveSpeed;
            navMeshAgent.angularSpeed = rotationSpeed;
            navMeshAgent.acceleration = acceleration;
            navMeshAgent.stoppingDistance = 1.0f;
            
            navMeshAgent.updatePosition = true;
            navMeshAgent.updateRotation = true;
            navMeshAgent.autoBraking = true;
            navMeshAgent.autoRepath = true;
            navMeshAgent.enabled = true;
            navMeshAgent.isStopped = false;
            
            navMeshAgent.radius = 0.4f;
            navMeshAgent.height = 1.8f;
            navMeshAgent.stoppingDistance = 1.5f;
            navMeshAgent.obstacleAvoidanceType = ObstacleAvoidanceType.LowQualityObstacleAvoidance;
            
            if (showDebugLogs) Debug.Log($"‚úÖ {gameObject.name}: NavMeshAgent ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t v√† c·∫•u h√¨nh");
        }
        else
        {
            Debug.LogError($"‚ùå {gameObject.name}: KH√îNG C√ì NavMeshAgent! NPC s·∫Ω kh√¥ng th·ªÉ di chuy·ªÉn!");
        }
    }
    
    // X·ª≠ l√Ω di chuy·ªÉn m∆∞·ª£t m√† v·ªõi transition
    protected virtual void MoveToTarget(Vector3 targetPosition)
    {
        if (navMeshAgent != null && navMeshAgent.isOnNavMesh)
        {
            // N·∫øu ƒëang trong transition, ch·ªù ho√†n th√†nh
            if (isTransitioning)
            {
                if (Time.time - transitionStartTime >= transitionDuration)
                {
                    isTransitioning = false;
                    hasStartedMoving = true;
                    navMeshAgent.isStopped = false;
                    navMeshAgent.SetDestination(targetPosition);
                    
                    if (showDebugLogs)
                        Debug.Log($"{gameObject.name}: ‚úÖ Ho√†n th√†nh transition, b·∫Øt ƒë·∫ßu di chuy·ªÉn th·ª±c s·ª±");
                }
                return;
            }
            
            // N·∫øu ch∆∞a b·∫Øt ƒë·∫ßu di chuy·ªÉn, k√≠ch ho·∫°t animation v√† b·∫Øt ƒë·∫ßu transition
            if (!hasStartedMoving)
            {
                StartMovementTransition();
                navMeshAgent.SetDestination(targetPosition);
                navMeshAgent.isStopped = true;
                return;
            }
            
            // Di chuy·ªÉn b√¨nh th∆∞·ªùng
            navMeshAgent.SetDestination(targetPosition);
            navMeshAgent.isStopped = false;
            
            // C·∫≠p nh·∫≠t animation d·ª±a tr√™n t·ªëc ƒë·ªô th·ª±c t·∫ø
            bool isCurrentlyMoving = navMeshAgent.velocity.magnitude > 0.1f;
            UpdateAnimationState(isCurrentlyMoving);
        }
    }
    
    // B·∫Øt ƒë·∫ßu transition khi chuy·ªÉn t·ª´ idle sang walking
    protected virtual void StartMovementTransition()
    {
        if (!isTransitioning)
        {
            isTransitioning = true;
            transitionStartTime = Time.time;
            
            // K√≠ch ho·∫°t animation ƒëi b·ªô ngay l·∫≠p t·ª©c
            UpdateAnimationState(true);
            
            if (showDebugLogs)
                Debug.Log($"{gameObject.name}: üé¨ B·∫Øt ƒë·∫ßu transition t·ª´ idle sang walking");
        }
    }
    
    // T√¨m ki·∫øm k·∫ª ƒë·ªãch g·∫ßn nh·∫•t ƒë·ªãnh k·ª≥
    protected virtual IEnumerator FindEnemyRoutine()
    {
        while (!isDead)
        {
            FindClosestEnemy();
            yield return new WaitForSeconds(0.5f);
        }
    }
    
    // T√¨m k·∫ª ƒë·ªãch g·∫ßn nh·∫•t
    protected virtual void FindClosestEnemy()
    {
        if (!isInitialized) return;
        
        Collider[] hitColliders = Physics.OverlapSphere(transform.position, detectionRange, enemyLayerMask);
        
        if (showDebugLogs) Debug.Log($"üîç {gameObject.name}: T√¨m th·∫•y {hitColliders.Length} objects trong ph·∫°m vi {detectionRange}m");
        
        float shortestDistance = float.MaxValue;
        NPCBaseController? nearestEnemy = null;
        
        foreach (var hitCollider in hitColliders)
        {
            if (hitCollider.gameObject == gameObject) continue;
            
            NPCBaseController otherCharacter = hitCollider.GetComponent<NPCBaseController>();
            if (otherCharacter != null && !otherCharacter.IsDead())
            {
                if (otherCharacter.team != team)
                {
                    float distance = Vector3.Distance(transform.position, otherCharacter.transform.position);
                    
                    if (HasLineOfSight(otherCharacter.transform))
                    {
                        if (distance < shortestDistance)
                        {
                            shortestDistance = distance;
                            nearestEnemy = otherCharacter;
                        }
                    }
                }
            }
        }
        
        // C·∫≠p nh·∫≠t m·ª•c ti√™u
        if (nearestEnemy != null && targetEnemy != nearestEnemy)
        {
            targetEnemy = nearestEnemy;
            hasStartedMoving = false;
            
            if (showDebugLogs)
                Debug.Log($"üéØ {gameObject.name}: Ph√°t hi·ªán k·∫ª ƒë·ªãch m·ªõi {targetEnemy.gameObject.name}");
        }
    }
    
    /// <summary>
    /// T√¨m k·∫ª ƒë·ªãch trong ph·∫°m vi ph√°t hi·ªán
    /// </summary>
    protected virtual void FindEnemyInRange()
    {
        if (isDead) return;
        
        // N·∫øu ƒë√£ c√≥ target v√† target v·∫´n s·ªëng, kh√¥ng c·∫ßn t√¨m m·ªõi
        if (targetEnemy != null && !targetEnemy.IsDead())
        {
            float distanceToCurrentTarget = Vector3.Distance(transform.position, targetEnemy.transform.position);
            if (distanceToCurrentTarget <= detectionRange)
            {
                return; // Gi·ªØ target hi·ªán t·∫°i
            }
        }
          // T√¨m k·∫ª ƒë·ªãch m·ªõi
        Collider[] enemies = Physics.OverlapSphere(transform.position, detectionRange, enemyLayerMask);
        NPCBaseController? closestEnemy = null;
        float closestDistance = float.MaxValue;
        
        foreach (var enemyCollider in enemies)
        {
            NPCBaseController enemy = enemyCollider.GetComponent<NPCBaseController>();
            if (enemy != null && enemy != this && enemy.team != team && !enemy.IsDead())
            {
                float distance = Vector3.Distance(transform.position, enemy.transform.position);
                if (distance < closestDistance)
                {
                    closestDistance = distance;
                    closestEnemy = enemy;
                }
            }
        }
        
        if (closestEnemy != null && closestEnemy != targetEnemy)
        {
            targetEnemy = closestEnemy;
            if (showDebugLogs) Debug.Log($"üéØ {gameObject.name}: Ph√°t hi·ªán k·∫ª ƒë·ªãch m·ªõi: {targetEnemy.gameObject.name} (kho·∫£ng c√°ch: {closestDistance:F1}m)");
        }
    }

    // Ki·ªÉm tra xem c√≥ ƒë∆∞·ªùng nh√¨n ƒë·∫øn m·ª•c ti√™u kh√¥ng
    protected virtual bool HasLineOfSight(Transform target)
    {
        if (target == null) return false;
        
        Vector3 directionToTarget = target.position - transform.position;
        float distanceToTarget = directionToTarget.magnitude;
        
        Vector3 startPoint = transform.position + Vector3.up * 1f;
        Vector3 targetPoint = target.position + Vector3.up * 1f;
        
        if (Physics.Raycast(startPoint, targetPoint - startPoint, out RaycastHit hit, distanceToTarget, obstacleLayerMask))
        {
            return false;
        }
        
        return true;
    }
    
    public virtual bool CanAttack()
    {
        float currentCooldown = attackCooldown;
        
        if (useVariableAttackCooldown)
        {
            switch (lastUsedAttackTrigger)
            {
                case var trigger when trigger == ANIM_ATTACK1:
                    currentCooldown = attack1Cooldown;
                    break;
                case var trigger when trigger == ANIM_ATTACK2:
                    currentCooldown = attack2Cooldown;
                    break;
                default:
                    currentCooldown = attackCooldown;
                    break;
            }
        }
        
        return Time.time >= lastAttackTime + currentCooldown;
    }
    
    public virtual void Attack(NPCBaseController target)
    {
        if (isDead || !CanAttack() || target == null) return;
          // C·∫≠p nh·∫≠t th·ªùi gian t·∫•n c√¥ng
        lastAttackTime = Time.time;
        hasDealtDamageThisAttack = false; // Reset flag cho ƒë√≤n t·∫•n c√¥ng m·ªõi
        
        // L∆∞u target ƒë·ªÉ s·ª≠ d·ª•ng khi animation hit
        currentAttackTarget = target;
        
        // K√≠ch ho·∫°t animation t·∫•n c√¥ng v·ªõi random attack
        if (animator != null)
        {
            string attackTrigger = GetRandomAttackTrigger();
            animator.SetTrigger(attackTrigger);
            lastUsedAttackTrigger = attackTrigger;
            
            if (showDebugLogs) Debug.Log($"üéØ {gameObject.name} th·ª±c hi·ªán attack ({attackTrigger}) ‚Üí {target.gameObject.name}");
            
            // B·∫Øt ƒë·∫ßu coroutine ƒë·ªÉ delay damage ƒë·∫øn hit frame
            StartCoroutine(DelayedAttackHit());
        }
        else
        {
            // Fallback: n·∫øu kh√¥ng c√≥ animator th√¨ g√¢y damage ngay
            DealDamageToTarget();
        }
    }
    
    // Coroutine ƒë·ªÉ delay damage ƒë·∫øn timing ph√π h·ª£p v·ªõi animation
    protected virtual System.Collections.IEnumerator DelayedAttackHit()
    {
        // Ch·ªù ƒë·∫øn timing hit ƒë∆∞·ª£c c·∫•u h√¨nh
        yield return new WaitForSeconds(attackAnimationDuration * attackHitTiming);
        
        // G√¢y damage t·∫°i th·ªùi ƒëi·ªÉm hit
        OnAttackHit();
    }
    
    // Method n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi t·ª´ Animation Event t·∫°i hit frame
    public virtual void OnAttackHit()
    {
        DealDamageToTarget();
    }
      // G√¢y s√°t th∆∞∆°ng th·ª±c s·ª± cho target hi·ªán t·∫°i
    protected virtual void DealDamageToTarget()
    {
        if (currentAttackTarget == null || currentAttackTarget.IsDead()) 
        {
            if (showDebugLogs) Debug.Log($"‚ùå {gameObject.name}: Kh√¥ng c√≥ target h·ª£p l·ªá ƒë·ªÉ g√¢y damage");
            return;
        }

        // Ki·ªÉm tra ƒë√£ g√¢y s√°t th∆∞∆°ng cho ƒë√≤n t·∫•n c√¥ng n√†y ch∆∞a
        if (hasDealtDamageThisAttack)
        {
            if (showDebugLogs) Debug.Log($"‚ùå {gameObject.name}: ƒê√£ g√¢y s√°t th∆∞∆°ng cho ƒë√≤n t·∫•n c√¥ng n√†y r·ªìi");
            return;
        }
        
        // Ki·ªÉm tra target v·∫´n trong t·∫ßm ƒë√°nh
        float distanceToTarget = Vector3.Distance(transform.position, currentAttackTarget.transform.position);
        if (distanceToTarget > attackRange * 1.2f)
        {
            if (showDebugLogs) Debug.Log($"‚ùå {gameObject.name}: Target {currentAttackTarget.gameObject.name} ƒë√£ ra kh·ªèi t·∫ßm ƒë√°nh");
            return;
        }
        
        // ƒê√°nh d·∫•u ƒë√£ g√¢y s√°t th∆∞∆°ng cho ƒë√≤n n√†y
        hasDealtDamageThisAttack = true;
        
        // G√¢y s√°t th∆∞∆°ng
        currentAttackTarget.TakeDamage(attackDamage, this);
        
        // Th√™m impact v·∫≠t l√Ω
        AddPhysicsImpact(currentAttackTarget);
        
        // Debug log
        if (showDebugLogs) Debug.Log($"‚öîÔ∏è {gameObject.name} (Team {team}) g√¢y {attackDamage} s√°t th∆∞∆°ng cho {currentAttackTarget.gameObject.name} (Team {currentAttackTarget.team})!");
          // Reset target sau khi attack
        currentAttackTarget = null!;
    }
    
    // Th√™m t√°c ƒë·ªông v·∫≠t l√Ω khi t·∫•n c√¥ng
    protected virtual void AddPhysicsImpact(NPCBaseController target)
    {
        if (target == null) return;
        
        Vector3 impactDirection = (target.transform.position - transform.position).normalized;
        
        float distance = Vector3.Distance(transform.position, target.transform.position);
        if (distance > maxImpactDistance) return;
          Rigidbody? targetRb = target.GetComponent<Rigidbody>();
        if (targetRb != null && !target.isDead)
        {
            Vector3 forceDirection = impactDirection + Vector3.up * 0.1f;
            targetRb.AddForce(forceDirection * impactForce, ForceMode.Impulse);
            
            if (showDebugLogs) Debug.Log($"üí• {gameObject.name}: ƒê·∫©y nh·∫π {target.gameObject.name} v·ªõi l·ª±c {impactForce}");
        }
        
        // K√≠ch ho·∫°t ragdoll khi m√°u th·∫•p ho·∫∑c ch·∫øt
        if (target.currentHealth <= target.maxHealth * 0.3f || target.isDead)
        {
            TriggerRagdollOnTarget(target, impactDirection, impactForce);
        }
    }
    
    // K√≠ch ho·∫°t ragdoll tr√™n target
    protected virtual void TriggerRagdollOnTarget(NPCBaseController target, Vector3 impactDirection, float impactForce)
    {
        // T√¨m RagdollController
        RagdollController ragdollController = target.GetComponent<RagdollController>();
        if (ragdollController != null)
        {
            Vector3 forceDirection = impactDirection + Vector3.up * 0.2f;
            Vector3 impactPoint = target.transform.position + Vector3.up * 1f;
            ragdollController.KichHoatRagdoll(forceDirection * (impactForce * 2f), impactPoint);
            if (showDebugLogs) Debug.Log($"üíÄ {target.gameObject.name}: K√≠ch ho·∫°t ragdoll do m√°u th·∫•p!");
            return;
        }
        
        // Fallback: T√¨m NPCRagdollManager
        NPCRagdollManager ragdollManager = FindFirstObjectByType<NPCRagdollManager>();
        if (ragdollManager != null)
        {
            ragdollManager.TanCongNPC(target.gameObject, impactDirection);
            if (showDebugLogs) Debug.Log($"üíÄ {target.gameObject.name}: K√≠ch ho·∫°t Ragdoll qua Manager!");
        }
    }
    
    public virtual void TakeDamage(float damage, NPCBaseController attacker)
    {
        if (isDead) return;
        
        currentHealth -= damage;        // T√≠nh to√°n l·ª±c t√°c ƒë·ªông v√† quy·∫øt ƒë·ªãnh ph·∫£n ·ª©ng
        if (attacker != null)
        {
            Vector3 knockbackDirection = (transform.position - attacker.transform.position).normalized;
            float totalForce = knockbackForce + knockbackUpwardForce;
            
            // Quy·∫øt ƒë·ªãnh lo·∫°i ph·∫£n ·ª©ng d·ª±a tr√™n l·ª±c t√°c ƒë·ªông
            if (totalForce >= ragdollForceThreshold && enableRagdollOnHit && 
                damage >= minDamageForRagdoll && (Time.time - lastRagdollTime) >= ragdollCooldown)
            {
                // L·ª±c ƒë·ªß m·∫°nh ‚Üí K√≠ch ho·∫°t ragdoll
                ActivateRagdollReaction(knockbackDirection, attacker);
            }
            else
            {
                // L·ª±c nh·∫π ‚Üí Hit reaction v√† c√≥ th·ªÉ counter attack
                ActivateHitReaction(knockbackDirection, attacker, damage);
            }
        }
          // Ph√°t hi·ªáu ·ª©ng b·ªã ƒë√°nh n·∫øu c√≥
        if (hitEffect != null)
        {
            Instantiate(hitEffect, transform.position, Quaternion.identity);
        }
        
        if (showDebugLogs) Debug.Log($"üíî {gameObject.name} nh·∫≠n {damage} s√°t th∆∞∆°ng t·ª´ {(attacker ? attacker.gameObject.name : "Unknown")}. M√°u c√≤n: {currentHealth:F1}/{maxHealth}");
          // Ki·ªÉm tra n·∫øu ƒë√£ ch·∫øt
        if (currentHealth <= 0)
        {
            Die();
        }
    }
    
    protected virtual void Die()
    {
        if (isDead) return;
        
        isDead = true;
        currentHealth = 0;
        
        // K√≠ch ho·∫°t ragdoll khi ch·∫øt
        TriggerRagdoll();
        
        // K√≠ch ho·∫°t animation ch·∫øt n·∫øu c√≥
        if (animator != null)
        {
            animator.SetTrigger(ANIM_DIE);
        }
        
        // Ph√°t hi·ªáu ·ª©ng ch·∫øt n·∫øu c√≥
        if (deathEffect != null)
        {
            Instantiate(deathEffect, transform.position, Quaternion.identity);
        }
        
        // V√¥ hi·ªáu h√≥a NavMeshAgent sau m·ªôt ch√∫t ƒë·ªÉ ragdoll c√≥ th·ªùi gian ho·∫°t ƒë·ªông
        StartCoroutine(DisableNavMeshAfterDelay(1f));
        
        // X√≥a gameObject sau th·ªùi gian
        Destroy(gameObject, 10f);
        
        if (showDebugLogs) Debug.Log($"üíÄ {gameObject.name} (Team {team}) ƒë√£ ch·∫øt v√† k√≠ch ho·∫°t ragdoll");
    }
    
    // Coroutine ƒë·ªÉ v√¥ hi·ªáu h√≥a NavMesh sau delay
    protected virtual IEnumerator DisableNavMeshAfterDelay(float delay)
    {
        yield return new WaitForSeconds(delay);
        
        if (navMeshAgent != null)
        {
            navMeshAgent.isStopped = true;
            navMeshAgent.enabled = false;
        }
    }
    
    // K√≠ch ho·∫°t ragdoll cho b·∫£n th√¢n
    protected virtual void TriggerRagdoll()
    {
        // T√¨m RagdollController
        RagdollController ragdollController = GetComponent<RagdollController>();
        if (ragdollController != null)
        {
            ragdollController.KichHoatRagdollNgayLapTuc();
            if (showDebugLogs) Debug.Log($"üíÄ {gameObject.name}: K√≠ch ho·∫°t Ragdoll!");
            return;
        }
        
        // Fallback: T√¨m NPCRagdollManager
        NPCRagdollManager ragdollManager = FindFirstObjectByType<NPCRagdollManager>();
        if (ragdollManager != null)
        {
            Vector3 attackDirection = Vector3.forward;
            ragdollManager.TanCongNPC(gameObject, attackDirection);
            if (showDebugLogs) Debug.Log($"üíÄ {gameObject.name}: K√≠ch ho·∫°t Ragdoll qua Manager!");
        }
        else
        {
            if (showDebugLogs) Debug.LogWarning($"‚ö†Ô∏è {gameObject.name}: Kh√¥ng t√¨m th·∫•y Ragdoll system!");
        }
    }
    
    public bool IsDead()
    {
        return isDead;
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i animation
    protected virtual void UpdateAnimationState(bool moving)
    {
        if (animator != null)
        {
            if (isMoving != moving)
            {
                isMoving = moving;
                
                if (moving)
                {
                    animator.SetBool(ANIM_IS_WALKING, true);
                    if (showDebugLogs) 
                        Debug.Log($"{gameObject.name}: üö∂ Chuy·ªÉn sang animation ƒëi b·ªô");
                }
                else
                {
                    animator.SetBool(ANIM_IS_WALKING, false);
                    if (showDebugLogs) 
                        Debug.Log($"{gameObject.name}: üßç Chuy·ªÉn v·ªÅ animation ƒë·ª©ng y√™n");
                }
            }
            
            try
            {
                animator.SetBool(ANIM_IS_WALKING, isMoving);
            }
            catch (System.Exception e)
            {
                Debug.LogWarning($"{gameObject.name}: Kh√¥ng th·ªÉ ƒë·∫∑t tham s·ªë {ANIM_IS_WALKING} tr√™n Animator: {e.Message}");
            }
        }
    }
    
    // D·ª´ng di chuy·ªÉn
    protected virtual void StopMoving()
    {
        if (navMeshAgent != null && navMeshAgent.isOnNavMesh)
        {
            navMeshAgent.isStopped = true;
            navMeshAgent.velocity = Vector3.zero;
            UpdateAnimationState(false);
        }
        
        // Reset movement states
        isTransitioning = false;
        hasStartedMoving = false;
        
        if (showDebugLogs) 
            Debug.Log($"{gameObject.name}: ‚èπÔ∏è ƒê√£ d·ª´ng di chuy·ªÉn ho√†n to√†n");
    }
    
    // Xoay v·ªÅ ph√≠a m·ª•c ti√™u
    protected virtual void RotateTowards(Vector3 targetPosition)
    {
        Vector3 direction = targetPosition - transform.position;
        direction.y = 0;
        
        if (direction != Vector3.zero)
        {
            bool wasMoving = isMoving;
            
            Quaternion targetRotation = Quaternion.LookRotation(direction);
            float angleToTarget = Quaternion.Angle(transform.rotation, targetRotation);
            
            bool needRotation = angleToTarget > 20f;
            
            if (needRotation)
            {
                UpdateAnimationState(true);
            }
            
            transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, rotationSpeed * Time.deltaTime);
            
            angleToTarget = Quaternion.Angle(transform.rotation, targetRotation);
            
            if (angleToTarget < 5f && !wasMoving && needRotation)
            {
                UpdateAnimationState(false);
                
                if (showDebugLogs) Debug.Log($"{gameObject.name}: ƒê√£ ho√†n th√†nh quay, chuy·ªÉn v·ªÅ tr·∫°ng th√°i ƒë·ª©ng y√™n");
            }
        }
    }
    
    // T√¨m ki·∫øm v√† di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ ng·∫´u nhi√™n trong khi kh√¥ng c√≥ m·ª•c ti√™u
    protected virtual IEnumerator PatrolWhenIdle()
    {
        yield return new WaitForSeconds(2f);
        
        while (!isDead)
        {
            if (targetEnemy == null && isInitialized && navMeshAgent != null && navMeshAgent.isOnNavMesh)
            {
                Vector3 randomDirection = Random.insideUnitSphere * (detectionRange * 0.5f);
                randomDirection += transform.position;
                randomDirection.y = transform.position.y;
                
                if (NavMesh.SamplePosition(randomDirection, out NavMeshHit hit, detectionRange, NavMesh.AllAreas))
                {
                    hasStartedMoving = false;
                    MoveToTarget(hit.position);
                    
                    if (showDebugLogs) Debug.Log($"üö∂ {gameObject.name}: Kh√¥ng c√≥ m·ª•c ti√™u, patrol ƒë·∫øn {hit.position}");
                }
                
                yield return new WaitForSeconds(Random.Range(3f, 6f));
            }
            else
            {
                yield return new WaitForSeconds(0.5f);
            }
        }
    }
    
    // Random ch·ªçn attack trigger theo t·ª∑ l·ªá ƒë∆∞·ª£c c·∫•u h√¨nh
    protected virtual string GetRandomAttackTrigger()
    {
        float randomValue = Random.Range(0f, 100f);
        string selectedTrigger;
        
        if (randomValue <= basicAttackChance)
        {
            selectedTrigger = ANIM_ATTACK;
        }
        else if (randomValue <= basicAttackChance + attack1Chance)
        {
            selectedTrigger = ANIM_ATTACK1;
        }
        else
        {
            selectedTrigger = ANIM_ATTACK2;
        }
        
        if (showDebugLogs) 
            Debug.Log($"üé≤ {gameObject.name}: Random value: {randomValue:F1}% ‚Üí Attack trigger: {selectedTrigger}");
            
        return selectedTrigger;
    }

    // Validate v√† normalize t·ª∑ l·ªá attack ƒë·ªÉ ƒë·∫£m b·∫£o t·ªïng = 100%
    protected virtual void ValidateAttackChances()
    {
        float totalChance = basicAttackChance + attack1Chance + attack2Chance;
        
        if (Mathf.Abs(totalChance - 100f) > 0.1f)
        {
            if (showDebugLogs) 
                Debug.LogWarning($"‚ö†Ô∏è {gameObject.name}: T·ªïng t·ª∑ l·ªá attack kh√¥ng b·∫±ng 100% ({totalChance:F1}%). ƒêang normalize...");
            
            if (totalChance > 0)
            {
                basicAttackChance = (basicAttackChance / totalChance) * 100f;
                attack1Chance = (attack1Chance / totalChance) * 100f;
                attack2Chance = (attack2Chance / totalChance) * 100f;
            }
            else
            {
                basicAttackChance = 40f;
                attack1Chance = 30f;
                attack2Chance = 30f;
            }
        }
        
        if (showDebugLogs)
            Debug.Log($"‚úÖ {gameObject.name}: Attack chances - Basic: {basicAttackChance:F1}%, Attack1: {attack1Chance:F1}%, Attack2: {attack2Chance:F1}%");
    }
    
    // Animation Events
    public virtual void OnFootstep()
    {
        if (showDebugLogs) Debug.Log($"{gameObject.name}: B∆∞·ªõc ch√¢n");
    }
    
    // Hi·ªÉn th·ªã ph·∫°m vi ph√°t hi·ªán v√† t·∫ßm ƒë√°nh trong Scene View
    protected virtual void OnDrawGizmosSelected()
    {
        // Ph·∫°m vi ph√°t hi·ªán
        Gizmos.color = new Color(0.5f, 0.5f, 1f, 0.3f);
        Gizmos.DrawWireSphere(transform.position, detectionRange);
        
        // T·∫ßm ƒë√°nh
        Gizmos.color = new Color(1f, 0.5f, 0.5f, 0.3f);
        Gizmos.DrawWireSphere(transform.position, attackRange);
        
        // Hi·ªÉn th·ªã m·ª•c ti√™u hi·ªán t·∫°i
        if (targetEnemy != null && !targetEnemy.IsDead())
        {
            Gizmos.color = Color.red;
            Gizmos.DrawLine(transform.position + Vector3.up, targetEnemy.transform.position + Vector3.up);
        }
    }
    
    // Method ƒë·ªÉ debug th√¥ng tin attack system
    [ContextMenu("Debug Attack System Info")]
    public void DebugAttackSystemInfo()
    {
        Debug.Log($"=== ATTACK SYSTEM INFO - {gameObject.name} ===");
        Debug.Log($"üìä Attack Chances: Basic {basicAttackChance:F1}%, Attack1 {attack1Chance:F1}%, Attack2 {attack2Chance:F1}%");
        Debug.Log($"‚è∞ Cooldowns: Basic {attackCooldown}s, Attack1 {attack1Cooldown}s, Attack2 {attack2Cooldown}s");
        Debug.Log($"üéØ Last Used Attack: {(string.IsNullOrEmpty(lastUsedAttackTrigger) ? "None" : lastUsedAttackTrigger)}");
        Debug.Log($"üîÑ Variable Cooldown: {(useVariableAttackCooldown ? "Enabled" : "Disabled")}");
        Debug.Log($"‚öîÔ∏è Can Attack Now: {CanAttack()}");
        if (!CanAttack())
        {
            float timeRemaining = (lastAttackTime + attackCooldown) - Time.time;
            Debug.Log($"‚è≥ Time until next attack: {timeRemaining:F1}s");
        }
        Debug.Log("==========================================");
    }
    
    // Test methods
    [ContextMenu("Test Attack")]
    public void TestAttack()
    {
        if (showDebugLogs) Debug.Log($"üß™ {gameObject.name}: Test Attack method called");
    }    /// <summary>
    /// Apply CharacterData ScriptableObject v√†o NPCBaseController
    /// B√¢y gi·ªù load TO√ÄN B·ªò fields t·ª´ CharacterData
    /// </summary>
    protected virtual void ApplyCharacterData()
    {
        if (characterData != null)
        {
            // Basic Stats
            maxHealth = characterData.maxHealth;
            team = characterData.teamId;
            
            // Movement Settings
            moveSpeed = characterData.moveSpeed;
            rotationSpeed = characterData.rotationSpeed;
            acceleration = characterData.acceleration;
            
            // Combat Stats
            attackDamage = characterData.baseDamage;
            attackCooldown = characterData.attackCooldown;
            attackRange = characterData.attackRange;
            attackAnimationDuration = characterData.attackAnimationDuration;
            attackHitTiming = characterData.attackHitTiming;
            
            // AI Settings
            detectionRange = characterData.detectionRange;
            enemyLayerMask = characterData.enemyLayerMask;
            obstacleLayerMask = characterData.obstacleLayerMask;
            
            // Attack Variation Settings
            basicAttackChance = characterData.basicAttackChance;
            attack1Chance = characterData.attack1Chance;
            attack2Chance = characterData.attack2Chance;
            
            // Advanced Attack Settings
            useVariableAttackCooldown = characterData.useVariableAttackCooldown;
            attack1Cooldown = characterData.attack1Cooldown;
            attack2Cooldown = characterData.attack2Cooldown;
            
            // Effects (n·∫øu c√≥ trong CharacterData)
            if (characterData.hitEffect != null)
                hitEffect = characterData.hitEffect;
            if (characterData.deathEffect != null)
                deathEffect = characterData.deathEffect;
            
            // Physics Impact Settings
            impactForce = characterData.impactForce;
            knockbackForce = characterData.knockbackForce;
            knockbackUpwardForce = characterData.knockbackUpwardForce;
            maxImpactDistance = characterData.maxImpactDistance;
            
            // Ragdoll Reaction Settings
            enableRagdollOnHit = characterData.enableRagdollOnHit;
            ragdollCooldown = characterData.ragdollCooldown;
            minDamageForRagdoll = characterData.minDamageForRagdoll;
            
            // Hit Reaction Settings
            ragdollForceThreshold = characterData.ragdollForceThreshold;
            canCounterAttack = characterData.canCounterAttack;
            counterAttackCooldown = characterData.counterAttackCooldown;
            counterAttackDamageMultiplier = characterData.counterAttackDamageMultiplier;
            
            // Debug Settings
            showDebugLogs = characterData.showDebugLogs;

            if (showDebugLogs) Debug.Log($"üìú {gameObject.name}: ƒê√£ √°p d·ª•ng TO√ÄN B·ªò CharacterData '{characterData.characterName}' - HP:{maxHealth}, Damage:{attackDamage}, Team:{team}, Speed:{moveSpeed}, Impact:{impactForce}");
        }
        else
        {
            if (showDebugLogs) Debug.Log($"‚ö†Ô∏è {gameObject.name}: Kh√¥ng c√≥ CharacterData, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh");
        }
    }

    /// <summary>
    /// K√≠ch ho·∫°t ph·∫£n ·ª©ng ragdoll khi b·ªã t·∫•n c√¥ng m·∫°nh
    /// </summary>
    protected virtual void ActivateRagdollReaction(Vector3 knockbackDirection, NPCBaseController attacker)
    {
        RagdollController ragdollController = GetComponent<RagdollController>();
        if (ragdollController != null)
        {
            Vector3 impactForce = knockbackDirection * knockbackForce + Vector3.up * knockbackUpwardForce;
            Vector3 impactPoint = transform.position + Vector3.up * 1f;
            ragdollController.KichHoatRagdoll(impactForce, impactPoint);
            
            lastRagdollTime = Time.time;
            
            if (showDebugLogs) Debug.Log($"üí• {gameObject.name}: K√≠ch ho·∫°t ragdoll - l·ª±c m·∫°nh t·ª´ {attacker.gameObject.name}");
        }
        else
        {
            // Fallback: Knockback m·∫°nh
            Rigidbody rb = GetComponent<Rigidbody>();
            if (rb != null)
            {
                rb.AddForce(knockbackDirection * knockbackForce + Vector3.up * knockbackUpwardForce, ForceMode.Impulse);
                if (showDebugLogs) Debug.Log($"üí• {gameObject.name}: Knockback m·∫°nh (no ragdoll controller)");
            }
        }
    }
    
    /// <summary>
    /// K√≠ch ho·∫°t ph·∫£n ·ª©ng hit nh·∫π v√† c√≥ th·ªÉ counter attack
    /// </summary>
    protected virtual void ActivateHitReaction(Vector3 knockbackDirection, NPCBaseController attacker, float damage)
    {
        // Hit reaction nh·∫π - ch·ªâ l√†m gi·∫≠t m√¨nh v√† c√≥ th·ªÉ counter
        if (animator != null)
        {
            // K√≠ch ho·∫°t animation hit nh·∫π n·∫øu c√≥
            try 
            {
                bool hasHitParameter = false;
                foreach (AnimatorControllerParameter param in animator.parameters)
                {
                    if (param.name == ANIM_HIT && param.type == AnimatorControllerParameterType.Trigger)
                    {
                        hasHitParameter = true;
                        break;
                    }
                }
                
                if (hasHitParameter)
                {
                    animator.SetTrigger(ANIM_HIT);
                }
            }
            catch (System.Exception e)
            {
                if (showDebugLogs)
                    Debug.LogWarning($"‚ö†Ô∏è L·ªói khi trigger animation Hit: {e.Message}");
            }
        }
        
        // Knockback nh·∫π ƒë·ªÉ t·∫°o c·∫£m gi√°c b·ªã ƒë·∫©y
        Rigidbody rb = GetComponent<Rigidbody>();
        if (rb != null)
        {
            Vector3 lightKnockback = knockbackDirection * (knockbackForce * 0.2f);
            rb.AddForce(lightKnockback, ForceMode.Impulse);
        }
        
        // C·ªë g·∫Øng counter attack n·∫øu c√≥ th·ªÉ
        if (canCounterAttack && (Time.time - lastCounterAttackTime) >= counterAttackCooldown)
        {
            StartCoroutine(DelayedCounterAttack(attacker));
        }
        
        if (showDebugLogs) Debug.Log($"ü•ä {gameObject.name}: Hit reaction nh·∫π t·ª´ {attacker.gameObject.name} - damage: {damage}");
    }
    
    /// <summary>
    /// Counter attack sau m·ªôt kho·∫£ng delay ng·∫Øn
    /// </summary>
    protected virtual System.Collections.IEnumerator DelayedCounterAttack(NPCBaseController attacker)
    {
        // Delay ng·∫Øn ƒë·ªÉ t·∫°o c·∫£m gi√°c t·ª± nhi√™n
        yield return new WaitForSeconds(0.1f);
        
        if (attacker != null && !attacker.IsDead() && !isDead)
        {
            float distanceToAttacker = Vector3.Distance(transform.position, attacker.transform.position);
            
            // Ch·ªâ counter n·∫øu attacker v·∫´n trong t·∫ßm
            if (distanceToAttacker <= attackRange * 1.5f)
            {
                lastCounterAttackTime = Time.time;
                
                // Xoay v·ªÅ ph√≠a attacker
                RotateTowards(attacker.transform.position);
                
                // Th·ª±c hi·ªán counter attack v·ªõi damage cao h∆°n
                float originalDamage = attackDamage;
                attackDamage *= counterAttackDamageMultiplier;
                
                if (showDebugLogs) Debug.Log($"üî• {gameObject.name}: COUNTER ATTACK ‚Üí {attacker.gameObject.name} (damage: {attackDamage:F1})");
                
                Attack(attacker);
                
                // Kh√¥i ph·ª•c damage g·ªëc
                attackDamage = originalDamage;
            }
        }
    }
}
