using UnityEngine;
using System;

/// <summary>
/// Component qu·∫£n l√Ω s·ª©c kh·ªèe v√† damage cho NPC
/// T√≠ch h·ª£p v·ªõi ragdoll system khi nh·∫≠n damage
/// </summary>
public class NPCHealthComponent : MonoBehaviour
{
    [Header("Health Settings")]
    [SerializeField, Tooltip("M√°u t·ªëi ƒëa c·ªßa NPC")]
    private float mauToiDa = 100f;
    
    [SerializeField, Tooltip("M√°u hi·ªán t·∫°i")]
    private float mauHienTai = 100f;
    
    [Header("Damage Settings")]
    [SerializeField, Tooltip("Damage t·ªëi thi·ªÉu ƒë·ªÉ k√≠ch ho·∫°t ragdoll")]
    private float damageToiThieuChoRagdoll = 20f;
    
    [SerializeField, Tooltip("Th·ªùi gian b·∫•t t·ª≠ sau khi nh·∫≠n damage")]
    private float thoiGianBatTu = 1f;
    
    [Header("Effects")]
    [SerializeField, Tooltip("Hi·ªáu ·ª©ng khi b·ªã t·∫•n c√¥ng")]
    private ParticleSystem hieUUngBiTanCong;
    
    [SerializeField, Tooltip("√Çm thanh khi b·ªã t·∫•n c√¥ng")]
    private AudioClip amThanhBiTanCong;
      // Events
    public event Action<Vector3, Vector3, float>? OnNPCBiTanCong; // h∆∞·ªõng, v·ªã tr√≠, l·ª±c
    public event Action? OnNPCChet;
    
    private bool dangBatTu = false;
    private float thoiGianBatDauBatTu = 0f;
    private AudioSource audioSource;
    
    // Properties
    public float MauHienTai => mauHienTai;
    public float MauToiDa => mauToiDa;
    public bool DaChet => mauHienTai <= 0f;
    public float TyLeMau => mauHienTai / mauToiDa;    void Awake()
    {
        audioSource = GetComponent<AudioSource>();
        if (audioSource == null && amThanhBiTanCong != null)
        {
            audioSource = gameObject.AddComponent<AudioSource>();
        }
    }
    
    void Start()
    {
        // ƒê·ªìng b·ªô health v·ªõi NPCController trong Start() ƒë·ªÉ ƒë·∫£m b·∫£o NPCController ƒë√£ kh·ªüi t·∫°o xong
        NPCController npcController = GetComponent<NPCController>();
        if (npcController != null)
        {
            // S·ª≠ d·ª•ng health t·ª´ NPCController thay v√¨ t·ª± qu·∫£n l√Ω
            mauToiDa = npcController.maxHealth;
            mauHienTai = npcController.currentHealth;
            
            Debug.Log($"üîÑ NPCHealthComponent ƒë·ªìng b·ªô v·ªõi NPCController health: {mauHienTai}/{mauToiDa}");
        }
        else
        {
            mauHienTai = mauToiDa;
            Debug.Log($"‚ö†Ô∏è NPCHealthComponent kh√¥ng t√¨m th·∫•y NPCController, s·ª≠ d·ª•ng health m·∫∑c ƒë·ªãnh: {mauHienTai}/{mauToiDa}");
        }
    }
    
    void Update()
    {
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i b·∫•t t·ª≠
        if (dangBatTu && Time.time - thoiGianBatDauBatTu >= thoiGianBatTu)
        {
            dangBatTu = false;
        }
    }
      /// <summary>
    /// Nh·∫≠n damage t·ª´ t·∫•n c√¥ng
    /// </summary>
    /// <param name="damage">L∆∞·ª£ng damage</param>
    /// <param name="huongTanCong">H∆∞·ªõng t·∫•n c√¥ng (normalized)</param>
    /// <param name="viTriTanCong">V·ªã tr√≠ b·ªã t·∫•n c√¥ng</param>
    /// <param name="nguoiTanCong">ƒê·ªëi t∆∞·ª£ng t·∫•n c√¥ng (optional)</param>
    public void NhanDamage(float damage, Vector3 huongTanCong, Vector3 viTriTanCong, GameObject? nguoiTanCong = null)
    {
        // Ki·ªÉm tra b·∫•t t·ª≠
        if (dangBatTu || DaChet) return;
          // ƒê·ªìng b·ªô v·ªõi NPCController n·∫øu c√≥
        NPCController npcController = GetComponent<NPCController>();
        if (npcController != null)
        {            // L·∫•y NPCController t·ª´ attacker n·∫øu c√≥
            NPCController? attackerController = nguoiTanCong?.GetComponent<NPCController>();
            
            // S·ª≠ d·ª•ng NPCController's TakeDamage method thay v√¨ t·ª± tr·ª´ m√°u
            // S·ª≠ d·ª•ng null! ƒë·ªÉ bypass null warning v√¨ NPCController.TakeDamage c√≥ th·ªÉ handle null
            npcController.TakeDamage(damage, attackerController!);
            
            // C·∫≠p nh·∫≠t health t·ª´ NPCController
            mauHienTai = npcController.currentHealth;
            
            Debug.Log($"üîÑ ƒê·ªìng b·ªô health v·ªõi NPCController: {mauHienTai}/{mauToiDa}");
        }
        else
        {
            // Tr·ª´ m√°u tr·ª±c ti·∫øp n·∫øu kh√¥ng c√≥ NPCController
            mauHienTai = Mathf.Max(0f, mauHienTai - damage);
        }
        
        // B·∫Øt ƒë·∫ßu th·ªùi gian b·∫•t t·ª≠
        dangBatTu = true;
        thoiGianBatDauBatTu = Time.time;
        
        // T√≠nh l·ª±c ragdoll d·ª±a tr√™n damage
        float lucRagdoll = Mathf.Max(damage, damageToiThieuChoRagdoll);
        
        // Trigger ragdoll n·∫øu damage ƒë·ªß l·ªõn
        if (damage >= damageToiThieuChoRagdoll)
        {
            OnNPCBiTanCong?.Invoke(huongTanCong, viTriTanCong, lucRagdoll);
        }
        
        // Ph√°t hi·ªáu ·ª©ng
        PhatHieuUngBiTanCong(viTriTanCong);
        
        // Ph√°t √¢m thanh
        if (audioSource != null && amThanhBiTanCong != null)
        {
            audioSource.PlayOneShot(amThanhBiTanCong);
        }
        
        // Ki·ªÉm tra ch·∫øt (s·ª≠ d·ª•ng NPCController's status n·∫øu c√≥)
        bool dachet = npcController != null ? npcController.IsDead() : DaChet;
        if (dachet)
        {
            OnNPCChet?.Invoke();
            if (npcController == null) // Ch·ªâ x·ª≠ l√Ω ch·∫øt n·∫øu kh√¥ng c√≥ NPCController
            {
                XuLyNPCChet();
            }
        }
        
        Debug.Log($"üíî {gameObject.name} nh·∫≠n {damage} damage. M√°u c√≤n: {mauHienTai}/{mauToiDa}");
    }
    
    /// <summary>
    /// Nh·∫≠n t·∫•n c√¥ng (wrapper cho NhanDamage v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh)
    /// </summary>
    public void NhanTanCong(Vector3 huongTanCong, Vector3 viTriTanCong, float luc)
    {
        // T√≠nh damage d·ª±a tr√™n l·ª±c
        float damage = luc * 2f; // C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh t·ª∑ l·ªá n√†y
        NhanDamage(damage, huongTanCong, viTriTanCong);
    }
    
    /// <summary>
    /// H·ªìi m√°u
    /// </summary>
    public void HoiMau(float luongHoi)
    {
        if (DaChet) return;
        
        mauHienTai = Mathf.Min(mauToiDa, mauHienTai + luongHoi);
        Debug.Log($"üíö {gameObject.name} h·ªìi {luongHoi} m√°u. M√°u hi·ªán t·∫°i: {mauHienTai}/{mauToiDa}");
    }
    
    /// <summary>
    /// Reset v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
    /// </summary>
    public void ResetTrangThai()
    {
        mauHienTai = mauToiDa;
        dangBatTu = false;
        Debug.Log($"üîÑ {gameObject.name} ƒë√£ reset tr·∫°ng th√°i");
    }
    
    /// <summary>
    /// Ph√°t hi·ªáu ·ª©ng khi b·ªã t·∫•n c√¥ng
    /// </summary>
    private void PhatHieuUngBiTanCong(Vector3 viTri)
    {
        if (hieUUngBiTanCong != null)
        {
            // Di chuy·ªÉn particle system ƒë·∫øn v·ªã tr√≠ b·ªã t·∫•n c√¥ng
            hieUUngBiTanCong.transform.position = viTri;
            hieUUngBiTanCong.Play();
        }
        else
        {
            // T·∫°o hi·ªáu ·ª©ng ƒë∆°n gi·∫£n b·∫±ng debug visualization
            Debug.DrawRay(viTri, Vector3.up * 2f, Color.red, 1f);
        }
    }
    
    /// <summary>
    /// X·ª≠ l√Ω khi NPC ch·∫øt
    /// </summary>
    private void XuLyNPCChet()
    {
        Debug.Log($"üíÄ {gameObject.name} ƒë√£ ch·∫øt!");
        
        // C√≥ th·ªÉ th√™m logic kh√°c nh∆∞:
        // - T·∫Øt AI
        // - Spawn loot
        // - Trigger death animation
        // - Disable movement
        
        // T·∫°m th·ªùi disable movement components
        var navMeshAgent = GetComponent<UnityEngine.AI.NavMeshAgent>();
        if (navMeshAgent != null)
        {
            navMeshAgent.enabled = false;
        }
        
        // Disable collider ch√≠nh ƒë·ªÉ kh√¥ng block movement
        var mainCollider = GetComponent<Collider>();
        if (mainCollider != null && !mainCollider.isTrigger)
        {
            mainCollider.enabled = false;
        }
    }
    
    /// <summary>
    /// Ki·ªÉm tra c√≥ th·ªÉ nh·∫≠n damage kh√¥ng
    /// </summary>
    public bool CoTheNhanDamage()
    {
        return !dangBatTu && !DaChet;
    }
    
    void OnDrawGizmosSelected()
    {
        // V·∫Ω health bar ƒë∆°n gi·∫£n
        if (Application.isPlaying)
        {
            Vector3 viTriHealthBar = transform.position + Vector3.up * 2.5f;
            
            // Background
            Gizmos.color = Color.red;
            Gizmos.DrawCube(viTriHealthBar, new Vector3(2f, 0.2f, 0.1f));
            
            // Health bar
            Gizmos.color = Color.green;
            float tyLe = TyLeMau;
            Gizmos.DrawCube(viTriHealthBar - Vector3.right * (1f - tyLe), 
                           new Vector3(2f * tyLe, 0.15f, 0.05f));
        }
    }
}
