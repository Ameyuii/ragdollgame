using UnityEngine;

namespace NPCSystem.Characters.Archer
{
    /// <summary>
    /// Controller cho NPC Archer - chuy√™n v·ªÅ t·∫•n c√¥ng t·∫ßm xa v·ªõi cung t√™n
    /// </summary>
    public class ArcherController : NPCBaseController
    {
        [Header("Archer Specific Settings")]
        [SerializeField] private float shootRange = 15f;
        [SerializeField] private Transform bowTransform; // V·ªã tr√≠ cung
        [SerializeField] private Transform arrowSpawnPoint; // ƒêi·ªÉm spawn arrow
        [SerializeField] private GameObject arrowPrefab; // Prefab m≈©i t√™n
        [SerializeField] private int maxArrows = 30; // S·ªë m≈©i t√™n t·ªëi ƒëa
        
        private int currentArrows;
          protected override void Start()
        {
            base.Start();
            // Kh·ªüi t·∫°o s·ªë m≈©i t√™n
            currentArrows = maxArrows;
            
            // Set attack range cho Archer (t·∫ßm xa nh·∫•t)
            shootRange = attackRange; // S·ª≠ d·ª•ng attackRange t·ª´ NPCBaseController
        }
            protected void RotateTowardsTarget()
        {
            if (targetEnemy == null) return;
            
            // Archer c·∫ßn quay ch√≠nh x√°c ƒë·ªÉ b·∫Øn tr√∫ng
            Vector3 direction = (targetEnemy.transform.position - transform.position).normalized;
            direction.y = 0; // Ch·ªâ quay theo tr·ª•c Y
            
            if (direction != Vector3.zero)
            {
                Quaternion targetRotation = Quaternion.LookRotation(direction);
                transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, Time.deltaTime * 4f);
            }
        }
        
        protected bool IsInAttackRange(Transform target)
        {
            if (target == null || currentArrows <= 0) return false;
            
            float distance = Vector3.Distance(transform.position, target.position);
            return distance <= shootRange;
        }
          /// <summary>
        /// B·∫Øn m≈©i t√™n
        /// </summary>
        public void ShootArrow()
        {
            if (currentArrows <= 0 || arrowPrefab == null || arrowSpawnPoint == null) return;
            
            // T·∫°o m≈©i t√™n
            GameObject arrow = Instantiate(arrowPrefab, arrowSpawnPoint.position, arrowSpawnPoint.rotation);
            
            // H∆∞·ªõng m≈©i t√™n v·ªÅ ph√≠a target
            if (targetEnemy != null)
            {
                Vector3 direction = (targetEnemy.transform.position - arrowSpawnPoint.position).normalized;
                arrow.transform.LookAt(targetEnemy.transform.position);
                
                // Th√™m velocity cho arrow (n·∫øu c√≥ Rigidbody)
                Rigidbody arrowRb = arrow.GetComponent<Rigidbody>();
                if (arrowRb != null)
                {
                    arrowRb.linearVelocity = direction * 20f; // T·ªëc ƒë·ªô m≈©i t√™n
                }
            }
            
            // Gi·∫£m s·ªë m≈©i t√™n
            currentArrows--;
            Debug.Log($"Archer b·∫Øn m≈©i t√™n! C√≤n l·∫°i: {currentArrows}");
        }
        
        /// <summary>
        /// Animation Event - ƒë∆∞·ª£c g·ªçi khi b·∫Øn m≈©i t√™n
        /// </summary>
        public void OnArrowShot()
        {
            // ƒê∆∞·ª£c g·ªçi t·ª´ animation event
            ShootArrow();
        }
        
        /// <summary>
        /// N·∫°p th√™m m≈©i t√™n
        /// </summary>
        public void ReloadArrows(int amount)
        {
            currentArrows = Mathf.Min(currentArrows + amount, maxArrows);
            Debug.Log($"Archer n·∫°p th√™m {amount} m≈©i t√™n. T·ªïng: {currentArrows}");
        }
          /// <summary>
        /// Ki·ªÉm tra c√≥ th·ªÉ b·∫Øn kh√¥ng
        /// </summary>
        public bool CanShoot()
        {
            return targetEnemy != null && IsInAttackRange(targetEnemy.transform) && currentArrows > 0;
        }
        
        /// <summary>
        /// Get s·ªë m≈©i t√™n hi·ªán t·∫°i
        /// </summary>
        public int GetCurrentArrows()
        {
            return currentArrows;
        }
        
        /// <summary>
        /// T√≠nh kho·∫£ng c√°ch ƒë·∫øn target
        /// </summary>
        public float GetDistanceToTarget()
        {
            if (targetEnemy == null) return float.MaxValue;
            return Vector3.Distance(transform.position, targetEnemy.transform.position);
        }
          public override void TakeDamage(float damage, NPCBaseController? attacker = null)
        {
            if (attacker != null)
            {
                base.TakeDamage(damage, attacker);
            }
            
            // Archer th∆∞·ªùng tr√°nh combat t·∫ßm g·∫ßn
            if (currentHealth > 0 && targetEnemy != null)
            {
                float distance = GetDistanceToTarget();
                if (distance < 3f) // Qu√° g·∫ßn
                {
                    // C√≥ th·ªÉ th√™m logic tr√°nh n√© ho·∫∑c step back
                    Debug.Log($"Archer {gameObject.name} b·ªã t·∫•n c√¥ng g·∫ßn! C·∫ßn tr√°nh n√©!");
                }
            }
        }
        protected override void Update()
        {
            base.Update();
            
            // Auto reload khi h·∫øt m≈©i t√™n v√† kh√¥ng c√≥ target
            if (currentArrows <= 0 && targetEnemy == null)
            {
                // C√≥ th·ªÉ th√™m animation reload
                ReloadArrows(maxArrows);
            }
        }
        
        /// <summary>
        /// Animation Event methods cho Archer
        /// </summary>
        public override void OnFootstep()
        {
            Debug.Log($"ü¶∂ {gameObject.name}: Archer footstep");
        }
          public override void OnAttackHit()
        {
            Debug.Log($"üèπ {gameObject.name}: Archer arrow hit!");
            
            // Logic damage target
            if (targetEnemy != null && Vector3.Distance(transform.position, targetEnemy.transform.position) <= shootRange)
            {
                targetEnemy.TakeDamage(attackDamage, this);
                Debug.Log($"üéØ {gameObject.name}: Archer g√¢y {attackDamage} damage cho {targetEnemy.gameObject.name}!");
            }
        }
    }
}
