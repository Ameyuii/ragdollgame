using UnityEngine;
using System.Collections.Generic;
using System.Linq;

/// <summary>
/// Qu·∫£n l√Ω ragdoll cho t·∫•t c·∫£ NPC trong scene
/// T·ª± ƒë·ªông ph√°t hi·ªán v√† setup ragdoll, t√≠ch h·ª£p v·ªõi animation t·∫•n c√¥ng
/// </summary>
public class NPCRagdollManager : MonoBehaviour
{
    [Header("NPC Ragdoll Settings")]
    [SerializeField, Tooltip("T·ª± ƒë·ªông t√¨m v√† setup ragdoll cho t·∫•t c·∫£ NPC")]
    private bool tuDongSetupNPC = true;
    
    [SerializeField, Tooltip("Tag c·ªßa c√°c NPC trong scene")]
    private string tagNPC = "NPC";
    
    [SerializeField, Tooltip("L·ª±c t·∫•n c√¥ng m·∫∑c ƒë·ªãnh")]
    private float lucTanCong = 20f;
    
    [SerializeField, Tooltip("Th·ªùi gian ragdoll sau khi b·ªã t·∫•n c√¥ng")]
    private float thoiGianRagdoll = 3f;
    
    [Header("Animation Integration")]
    [SerializeField, Tooltip("T√™n trigger animation t·∫•n c√¥ng")]
    private string triggerTanCong = "TanCong";
    
    [SerializeField, Tooltip("T√™n parameter animation b·ªã hit")]
    private string parameterBiHit = "BiHit";
      [Header("Debug")]
    [SerializeField, Tooltip("Hi·ªÉn th·ªã debug info")]
    private bool hienThiDebug = false; // T·∫ÆT UI ƒë·ªÉ tr√°nh xung ƒë·ªôt v·ªõi Camera Settings
    
    // Danh s√°ch c√°c NPC v√† RagdollController c·ªßa ch√∫ng
    private Dictionary<GameObject, RagdollController> danhSachNPCRagdoll = new Dictionary<GameObject, RagdollController>();
    private Dictionary<GameObject, Animator> danhSachNPCAnimator = new Dictionary<GameObject, Animator>();
    
    void Start()
    {
        if (tuDongSetupNPC)
        {
            TimVaSetupTatCaNPC();
        }
    }
    
    /// <summary>
    /// T√¨m v√† setup ragdoll cho t·∫•t c·∫£ NPC trong scene
    /// </summary>
    private void TimVaSetupTatCaNPC()
    {
        // T√¨m t·∫•t c·∫£ GameObject c√≥ tag NPC
        GameObject[] tatCaNPC = GameObject.FindGameObjectsWithTag(tagNPC);
          if (tatCaNPC.Length == 0)
        {
            // N·∫øu kh√¥ng c√≥ tag NPC, t√¨m theo t√™n
            tatCaNPC = GameObject.FindObjectsByType<GameObject>(FindObjectsSortMode.None)
                .Where(go => go.name.ToLower().Contains("npc"))
                .ToArray();
        }
        
        Debug.Log($"üéØ T√¨m th·∫•y {tatCaNPC.Length} NPC trong scene");
        
        foreach (GameObject npc in tatCaNPC)
        {
            SetupRagdollChoNPC(npc);
        }
        
        if (hienThiDebug)
        {
            Debug.Log($"‚úÖ ƒê√£ setup ragdoll cho {danhSachNPCRagdoll.Count} NPC");
        }
    }
    
    /// <summary>
    /// Setup ragdoll cho m·ªôt NPC c·ª• th·ªÉ
    /// </summary>
    private void SetupRagdollChoNPC(GameObject npc)
    {
        if (npc == null) return;
        
        // Ki·ªÉm tra xem ƒë√£ c√≥ RagdollController ch∆∞a
        RagdollController ragdollController = npc.GetComponent<RagdollController>();
        if (ragdollController == null)
        {
            ragdollController = npc.AddComponent<RagdollController>();
        }
        
        // L·∫•y Animator n·∫øu c√≥
        Animator animator = npc.GetComponent<Animator>();
        
        // Th√™m v√†o danh s√°ch qu·∫£n l√Ω
        danhSachNPCRagdoll[npc] = ragdollController;
        if (animator != null)
        {
            danhSachNPCAnimator[npc] = animator;
        }
        
        // Setup NPCHealthComponent ƒë·ªÉ handle damage
        NPCHealthComponent health = npc.GetComponent<NPCHealthComponent>();
        if (health == null)
        {
            health = npc.AddComponent<NPCHealthComponent>();
        }
        
        // ƒêƒÉng k√Ω s·ª± ki·ªán khi NPC b·ªã t·∫•n c√¥ng
        health.OnNPCBiTanCong += (huongTanCong, viTriTanCong, lucTanCong) => 
        {
            XuLyNPCBiTanCong(npc, huongTanCong, viTriTanCong, lucTanCong);
        };
        
        if (hienThiDebug)
        {
            Debug.Log($"üîß Setup ragdoll cho NPC: {npc.name}");
        }
    }
    
    /// <summary>
    /// X·ª≠ l√Ω khi NPC b·ªã t·∫•n c√¥ng
    /// </summary>
    private void XuLyNPCBiTanCong(GameObject npc, Vector3 huongTanCong, Vector3 viTriTanCong, float luc)
    {
        if (!danhSachNPCRagdoll.ContainsKey(npc)) return;
        
        RagdollController ragdollController = danhSachNPCRagdoll[npc];
        
        // K√≠ch ho·∫°t ragdoll v·ªõi l·ª±c t·∫•n c√¥ng
        ragdollController.KichHoatRagdoll(huongTanCong * luc, viTriTanCong);
        
        // Trigger animation b·ªã hit n·∫øu c√≥ animator
        if (danhSachNPCAnimator.ContainsKey(npc))
        {
            Animator animator = danhSachNPCAnimator[npc];
            if (animator != null && animator.parameters.Any(p => p.name == parameterBiHit))
            {
                animator.SetTrigger(parameterBiHit);
            }
        }
        
        // T·ª± ƒë·ªông kh√¥i ph·ª•c sau th·ªùi gian
        StartCoroutine(KhoiPhucNPCSauThoiGian(npc, thoiGianRagdoll));
        
        if (hienThiDebug)
        {
            Debug.Log($"üí• NPC {npc.name} b·ªã t·∫•n c√¥ng - K√≠ch ho·∫°t ragdoll");
        }
    }
    
    /// <summary>
    /// Kh√¥i ph·ª•c NPC v·ªÅ tr·∫°ng th√°i b√¨nh th∆∞·ªùng sau th·ªùi gian
    /// </summary>
    private System.Collections.IEnumerator KhoiPhucNPCSauThoiGian(GameObject npc, float thoiGian)
    {
        yield return new WaitForSeconds(thoiGian);
        
        if (npc != null && danhSachNPCRagdoll.ContainsKey(npc))
        {
            RagdollController ragdollController = danhSachNPCRagdoll[npc];
            ragdollController.KhoiPhucAnimation();
            
            if (hienThiDebug)
            {
                Debug.Log($"üîÑ NPC {npc.name} ƒë√£ kh√¥i ph·ª•c animation");
            }
        }
    }
    
    /// <summary>
    /// T·∫•n c√¥ng m·ªôt NPC c·ª• th·ªÉ (ƒë·ªÉ test ho·∫∑c g·ªçi t·ª´ script kh√°c)
    /// </summary>
    public void TanCongNPC(GameObject npc, Vector3 huongTanCong, Vector3? viTriTanCong = null)
    {
        if (npc == null) return;
        
        Vector3 viTri = viTriTanCong ?? (npc.transform.position + Vector3.up * 1.5f);
        
        NPCHealthComponent health = npc.GetComponent<NPCHealthComponent>();
        if (health != null)
        {
            health.NhanTanCong(huongTanCong, viTri, lucTanCong);
        }
    }
    
    /// <summary>
    /// T·∫•n c√¥ng t·∫•t c·∫£ NPC trong scene (ƒë·ªÉ test)
    /// </summary>
    public void TanCongTatCaNPC()
    {
        foreach (var npc in danhSachNPCRagdoll.Keys)
        {
            Vector3 huongTanCong = (npc.transform.position - transform.position).normalized;
            TanCongNPC(npc, huongTanCong);
        }
        
        if (hienThiDebug)
        {
            Debug.Log($"üí• ƒê√£ t·∫•n c√¥ng t·∫•t c·∫£ {danhSachNPCRagdoll.Count} NPC");
        }
    }
      /// <summary>
    /// T√¨m NPC g·∫ßn nh·∫•t v√† t·∫•n c√¥ng
    /// </summary>
    public void TanCongNPCGanNhat()
    {
        GameObject? npcGanNhat = null;
        float khoangCachGanNhat = float.MaxValue;
        
        foreach (var npc in danhSachNPCRagdoll.Keys)
        {
            float khoangCach = Vector3.Distance(transform.position, npc.transform.position);
            if (khoangCach < khoangCachGanNhat)
            {
                khoangCachGanNhat = khoangCach;
                npcGanNhat = npc;
            }
        }
        
        if (npcGanNhat != null)
        {
            Vector3 huongTanCong = (npcGanNhat.transform.position - transform.position).normalized;
            TanCongNPC(npcGanNhat, huongTanCong);
        }
    }
    
    #region Debug UI
    
    void OnGUI()
    {
        if (!hienThiDebug) return;
        
        GUILayout.BeginArea(new Rect(10, 220, 300, 150));
        GUILayout.BeginVertical("box");
        
        GUILayout.Label("NPC Ragdoll Manager");
        GUILayout.Label($"S·ªë NPC ƒë∆∞·ª£c qu·∫£n l√Ω: {danhSachNPCRagdoll.Count}");
        
        GUILayout.Space(5);
        
        if (GUILayout.Button("T·∫•n c√¥ng t·∫•t c·∫£ NPC"))
        {
            TanCongTatCaNPC();
        }
        
        if (GUILayout.Button("T·∫•n c√¥ng NPC g·∫ßn nh·∫•t"))
        {
            TanCongNPCGanNhat();
        }
        
        GUILayout.Space(5);
        GUILayout.Label("Keyboard Controls:");
        GUILayout.Label("X - T·∫•n c√¥ng t·∫•t c·∫£ NPC");
        GUILayout.Label("C - T·∫•n c√¥ng NPC g·∫ßn nh·∫•t");
        
        GUILayout.EndVertical();
        GUILayout.EndArea();
    }
    
    #endregion
    
    void Update()
    {
        // Keyboard shortcuts ƒë·ªÉ test
        if (UnityEngine.InputSystem.Keyboard.current != null)
        {
            // X - T·∫•n c√¥ng t·∫•t c·∫£ NPC
            if (UnityEngine.InputSystem.Keyboard.current.xKey.wasPressedThisFrame)
            {
                TanCongTatCaNPC();
            }
            
            // C - T·∫•n c√¥ng NPC g·∫ßn nh·∫•t
            if (UnityEngine.InputSystem.Keyboard.current.cKey.wasPressedThisFrame)
            {
                TanCongNPCGanNhat();
            }
        }
    }
}
