using UnityEngine;
using UnityEngine.InputSystem;

/// <summary>
/// Script t·∫°o v√† qu·∫£n l√Ω camera ri√™ng cho NPC
/// Camera n√†y s·∫Ω theo d√µi ho·∫°t ƒë·ªông c·ªßa NPC t·ª´ ph√≠a sau v√† h∆°i cao h∆°n m·ªôt ch√∫t
/// </summary>
[RequireComponent(typeof(NPCController))]
public class NPCCamera : MonoBehaviour
{
    [Header("C·∫•u h√¨nh Camera")]
    [SerializeField, Tooltip("K√≠ch ho·∫°t camera ngay khi t·∫°o")]
    private bool kichHoatKhiStart = false;

    [Header("C·∫•u h√¨nh v·ªã tr√≠")]
    [SerializeField, Tooltip("Kho·∫£ng c√°ch ban ƒë·∫ßu t·ª´ camera ƒë·∫øn NPC")]
    private float khoangCachBanDau = 5f;

    [SerializeField, Tooltip("Kho·∫£ng c√°ch zoom t·ªëi thi·ªÉu")]
    private float khoangCachToiThieu = 2f;

    [SerializeField, Tooltip("Kho·∫£ng c√°ch zoom t·ªëi ƒëa")]
    private float khoangCachToiDa = 15f;

    [SerializeField, Tooltip("ƒê·ªô cao camera so v·ªõi NPC")]
    private float doCaoCamera = 2f;

    [Header("C·∫•u h√¨nh ƒëi·ªÅu khi·ªÉn")]
    [SerializeField, Tooltip("T·ªëc ƒë·ªô xoay camera NPC (ƒë·ªô/gi√¢y)")]
    private float tocDoXoayCamera = 150f; // TƒÉng t·ª´ 90f l√™n 150f ƒë·ªÉ responsive h∆°n

    [SerializeField, Tooltip("Nh√¢n t·ªëc ƒë·ªô xoay nhanh khi gi·ªØ Shift")]
    private float nhanTocDoXoayNhanh = 2.5f; // TƒÉng t·ª´ 2f l√™n 2.5f ƒë·ªÉ boost m·∫°nh h∆°n

    [SerializeField, Tooltip("ƒê·ªô nh·∫°y xoay chu·ªôt")]
    private float doNhayChuot = 3f; // TƒÉng t·ª´ 2f l√™n 3f ƒë·ªÉ nh·∫°y h∆°n

    [SerializeField, Tooltip("T·ªëc ƒë·ªô zoom")]
    private float tocDoZoom = 2f;

    [SerializeField, Tooltip("T·ªëc ƒë·ªô chuy·ªÉn ƒë·ªông m·ªÅm c·ªßa camera")]
    private float tocDoLerpCamera = 5f;

    [SerializeField, Tooltip("T·ªëc ƒë·ªô xoay m·ªÅm c·ªßa camera")]
    private float tocDoLerpXoay = 10f;

    [SerializeField, Tooltip("T·ª± ƒë·ªông focus v√†o nh√¢n v·∫≠t khi b·∫Øt ƒë·∫ßu xoay")]
    private bool tuDongFocus = true;

    // Bi·∫øn l∆∞u tr·ªØ camera ƒë√£ t·∫°o
    private Camera? npcCamera;
    private Transform? cameraTransform;
    private bool dangHoatDong = false;

    // Bi·∫øn qu·∫£n l√Ω xoay v√† zoom
    private float gocXoayNgang = 0f; // G√≥c xoay quanh tr·ª•c Y
    private float gocXoayDoc = 15f;  // G√≥c xoay l√™n xu·ªëng
    private float khoangCachHienTai;

    // Bi·∫øn qu·∫£n l√Ω input v√† focus
    private bool daDangKyInput = false;
    private bool dangXoay = false;
    private Vector3 viTriFocus;

    /// <summary>
    /// Kh·ªüi t·∫°o camera khi component ƒë∆∞·ª£c th√™m v√†o GameObject
    /// </summary>
    private void Awake()
    {
        // Kh·ªüi t·∫°o kho·∫£ng c√°ch ban ƒë·∫ßu
        khoangCachHienTai = khoangCachBanDau;

        // T·∫°o GameObject m·ªõi cho camera
        GameObject cameraObject = new GameObject(gameObject.name + "_Camera");
        npcCamera = cameraObject.AddComponent<Camera>();
        
        // C·∫•u h√¨nh camera
        npcCamera.fieldOfView = 60f;
        npcCamera.nearClipPlane = 0.3f;
        npcCamera.farClipPlane = 1000f;
        npcCamera.depth = 0; // ƒê·∫∑t depth th·∫•p h∆°n camera ch√≠nh
        
        // T·∫Øt camera m·∫∑c ƒë·ªãnh
        npcCamera.enabled = kichHoatKhiStart;
        dangHoatDong = kichHoatKhiStart;
        
        // L∆∞u transform ƒë·ªÉ d·ªÖ d√†ng ƒëi·ªÅu ch·ªânh v·ªã tr√≠
        cameraTransform = npcCamera.transform;
        
        // Th√™m audio listener nh∆∞ng t·∫Øt m·∫∑c ƒë·ªãnh ƒë·ªÉ tr√°nh xung ƒë·ªôt
        // AudioListener s·∫Ω ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi QuanLyCamera
        var audioListener = cameraObject.GetComponent<AudioListener>();
        if (audioListener == null)
        {
            audioListener = cameraObject.AddComponent<AudioListener>();
        }
        audioListener.enabled = false;

        // ƒê·∫∑t v·ªã tr√≠ ban ƒë·∫ßu cho camera
        CapNhatViTriCamera();
    }

    /// <summary>
    /// C·∫≠p nh·∫≠t v·ªã tr√≠ c·ªßa camera theo NPC v√† x·ª≠ l√Ω input
    /// </summary>
    private void LateUpdate()
    {
        if (dangHoatDong && cameraTransform != null)
        {
            // X·ª≠ l√Ω input chu·ªôt khi camera n√†y ƒëang ho·∫°t ƒë·ªông
            XuLyInputChuot();
            
            // C·∫≠p nh·∫≠t v·ªã tr√≠ camera
            CapNhatViTriCamera();
        }
    }

    /// <summary>
    /// X·ª≠ l√Ω input chu·ªôt ƒë·ªÉ xoay camera v√† zoom (ch·ªâ khi gi·ªØ chu·ªôt ph·∫£i ƒë·ªÉ xoay)
    /// </summary>
    private void XuLyInputChuot()
    {
        if (Mouse.current == null) return;

        // Ki·ªÉm tra tr·∫°ng th√°i chu·ªôt ph·∫£i
        bool chuotPhaiPressed = Mouse.current.rightButton.isPressed;
        bool batDauXoay = Mouse.current.rightButton.wasPressedThisFrame;
        bool ketThucXoay = Mouse.current.rightButton.wasReleasedThisFrame;

        // Auto-focus khi b·∫Øt ƒë·∫ßu xoay
        if (batDauXoay && tuDongFocus)
        {
            dangXoay = true;
            viTriFocus = transform.position + Vector3.up * doCaoCamera;
            Debug.Log("üéØ Auto-focus v√†o nh√¢n v·∫≠t - B·∫Øt ƒë·∫ßu orbital camera mode");
        }

        if (ketThucXoay)
        {
            dangXoay = false;
            Debug.Log("‚≠ï K·∫øt th√∫c orbital camera mode");
        }

        // X·ª≠ l√Ω xoay camera b·∫±ng chu·ªôt (ch·ªâ khi gi·ªØ chu·ªôt ph·∫£i)
        if (chuotPhaiPressed)
        {
            Vector2 deltaXoayChuot = Mouse.current.delta.ReadValue();

            // Ki·ªÉm tra tƒÉng t·ªëc xoay b·∫±ng Shift
            float tocDoXoayHienTai = tocDoXoayCamera;
            if (Keyboard.current != null && Keyboard.current.leftShiftKey.isPressed)
            {
                tocDoXoayHienTai *= nhanTocDoXoayNhanh;
                Debug.Log($"üöÄ Boost t·ªëc ƒë·ªô xoay: {tocDoXoayHienTai}¬∞/s");
            }

            // C·∫£i thi·ªán xoay quanh nh√¢n v·∫≠t - tƒÉng ƒë·ªô nh·∫°y v√† precision
            float multiplierXoay = dangXoay ? 0.035f : 0.025f; // TƒÉng khi ƒëang focus
            gocXoayNgang += deltaXoayChuot.x * doNhayChuot * tocDoXoayHienTai * Time.deltaTime * multiplierXoay;
            gocXoayDoc -= deltaXoayChuot.y * doNhayChuot * tocDoXoayHienTai * Time.deltaTime * multiplierXoay;

            // Gi·ªõi h·∫°n g√≥c xoay l√™n xu·ªëng (m·ªü r·ªông range ƒë·ªÉ d·ªÖ xoay h∆°n)
            gocXoayDoc = Mathf.Clamp(gocXoayDoc, -89f, 89f); // M·ªü r·ªông t·ª´ -85f ƒë·∫øn -89f
        }

        // X·ª≠ l√Ω zoom b·∫±ng scroll chu·ªôt (lu√¥n ho·∫°t ƒë·ªông)
        float scrollInput = Mouse.current.scroll.ReadValue().y;
        if (scrollInput != 0f)
        {
            khoangCachHienTai -= scrollInput * tocDoZoom * Time.deltaTime;
            khoangCachHienTai = Mathf.Clamp(khoangCachHienTai, khoangCachToiThieu, khoangCachToiDa);
        }
    }

    /// <summary>
    /// C·∫≠p nh·∫≠t v·ªã tr√≠ v√† xoay c·ªßa camera
    /// </summary>
    private void CapNhatViTriCamera()
    {
        if (cameraTransform == null) return;

        // T√≠nh to√°n v·ªã tr√≠ camera d·ª±a tr√™n g√≥c xoay v√† kho·∫£ng c√°ch
        Vector3 huongCamera = new Vector3(
            Mathf.Sin(gocXoayNgang * Mathf.Deg2Rad) * Mathf.Cos(gocXoayDoc * Mathf.Deg2Rad),
            Mathf.Sin(gocXoayDoc * Mathf.Deg2Rad),
            Mathf.Cos(gocXoayNgang * Mathf.Deg2Rad) * Mathf.Cos(gocXoayDoc * Mathf.Deg2Rad)
        );

        // Ch·ªçn ƒëi·ªÉm focus: d√πng viTriFocus khi ƒëang xoay, ho·∫∑c v·ªã tr√≠ NPC hi·ªán t·∫°i
        Vector3 diemFocus;
        if (dangXoay && tuDongFocus)
        {
            diemFocus = viTriFocus; // Gi·ªØ nguy√™n focus point khi ƒëang xoay
        }
        else
        {
            diemFocus = transform.position + Vector3.up * doCaoCamera;
            viTriFocus = diemFocus; // C·∫≠p nh·∫≠t focus point khi kh√¥ng xoay
        }

        // V·ªã tr√≠ m·ª•c ti√™u camera
        Vector3 viTriMoi = diemFocus + huongCamera * khoangCachHienTai;

        // Di chuy·ªÉn camera m·ªÅm m·∫°i ƒë·∫øn v·ªã tr√≠ m·ªõi (nhanh h∆°n khi ƒëang xoay)
        float tocDoLerpHienTai = dangXoay ? tocDoLerpCamera * 3f : tocDoLerpCamera; // TƒÉng t·ª´ 2f l√™n 3f
        cameraTransform.position = Vector3.Lerp(cameraTransform.position, viTriMoi, Time.deltaTime * tocDoLerpHienTai);
        
        // Xoay camera nh√¨n v·ªÅ ph√≠a ƒëi·ªÉm focus (m∆∞·ª£t m√† h∆°n khi orbital)
        Vector3 huongNhin = (diemFocus - cameraTransform.position).normalized;
        Quaternion xoayMoi = Quaternion.LookRotation(huongNhin);
        float tocDoXoayLerpHienTai = dangXoay ? tocDoLerpXoay * 2.5f : tocDoLerpXoay; // TƒÉng t·ª´ 1.5f l√™n 2.5f
        cameraTransform.rotation = Quaternion.Lerp(cameraTransform.rotation, xoayMoi, Time.deltaTime * tocDoXoayLerpHienTai);
    }

    /// <summary>
    /// K√≠ch ho·∫°t ho·∫∑c t·∫Øt camera
    /// AudioListener s·∫Ω ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi QuanLyCamera
    /// </summary>
    /// <param name="kichHoat">Tr·∫°ng th√°i k√≠ch ho·∫°t (true = b·∫≠t, false = t·∫Øt)</param>
    public void BatTatCamera(bool kichHoat)
    {
        if (npcCamera != null)
        {
            npcCamera.enabled = kichHoat;
            dangHoatDong = kichHoat;
            
            // N·∫øu camera ƒë∆∞·ª£c k√≠ch ho·∫°t, ƒë·∫∑t l·∫°i v·ªã tr√≠ ban ƒë·∫ßu
            if (kichHoat)
            {
                DatLaiViTriBanDau();
            }
            
            // AudioListener s·∫Ω ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi QuanLyCamera, kh√¥ng c·∫ßn x·ª≠ l√Ω ·ªü ƒë√¢y
        }
    }

    /// <summary>
    /// ƒê·∫∑t l·∫°i v·ªã tr√≠ ban ƒë·∫ßu c·ªßa camera
    /// </summary>
    public void DatLaiViTriBanDau()
    {
        gocXoayNgang = 0f;
        gocXoayDoc = 15f;
        khoangCachHienTai = khoangCachBanDau;
        
        if (cameraTransform != null)
        {
            CapNhatViTriCamera();
        }
    }

    /// <summary>
    /// ƒê·∫∑t g√≥c xoay c·ªßa camera
    /// </summary>
    /// <param name="gocNgang">G√≥c xoay ngang (Y)</param>
    /// <param name="gocDoc">G√≥c xoay d·ªçc (X)</param>
    public void DatGocXoay(float gocNgang, float gocDoc)
    {
        gocXoayNgang = gocNgang;
        gocXoayDoc = Mathf.Clamp(gocDoc, -80f, 80f);
    }

    /// <summary>
    /// ƒê·∫∑t kho·∫£ng c√°ch camera
    /// </summary>
    /// <param name="khoangCach">Kho·∫£ng c√°ch m·ªõi</param>
    public void DatKhoangCach(float khoangCach)
    {
        khoangCachHienTai = Mathf.Clamp(khoangCach, khoangCachToiThieu, khoangCachToiDa);
    }

    /// <summary>
    /// ƒê·∫∑t t·ªëc ƒë·ªô xoay camera
    /// </summary>
    /// <param name="tocDoMoi">T·ªëc ƒë·ªô xoay m·ªõi (ƒë·ªô/gi√¢y)</param>
    public void DatTocDoXoay(float tocDoMoi)
    {
        tocDoXoayCamera = Mathf.Max(0f, tocDoMoi);
    }

    /// <summary>
    /// ƒê·∫∑t ƒë·ªô nh·∫°y chu·ªôt
    /// </summary>
    /// <param name="doNhayMoi">ƒê·ªô nh·∫°y m·ªõi</param>
    public void DatDoNhayChuot(float doNhayMoi)
    {
        doNhayChuot = Mathf.Max(0f, doNhayMoi);
    }

    /// <summary>
    /// ƒê·∫∑t nh√¢n t·ªëc ƒë·ªô xoay nhanh (khi gi·ªØ Shift)
    /// </summary>
    /// <param name="nhanMoi">Nh√¢n t·ªëc ƒë·ªô m·ªõi</param>
    public void DatNhanTocDoXoayNhanh(float nhanMoi)
    {
        nhanTocDoXoayNhanh = Mathf.Max(1f, nhanMoi);
    }

    /// <summary>
    /// B·∫≠t/t·∫Øt auto-focus khi xoay
    /// </summary>
    /// <param name="batTat">True ƒë·ªÉ b·∫≠t, false ƒë·ªÉ t·∫Øt</param>
    public void BatTatAutoFocus(bool batTat)
    {
        tuDongFocus = batTat;
    }

    /// <summary>
    /// Ki·ªÉm tra tr·∫°ng th√°i auto-focus
    /// </summary>
    /// <returns>True n·∫øu auto-focus ƒëang b·∫≠t</returns>
    public bool KiemTraAutoFocus()
    {
        return tuDongFocus;
    }

    /// <summary>
    /// L·∫•y component camera
    /// </summary>
    /// <returns>Camera component</returns>
    public Camera? GetCamera()
    {
        return npcCamera;
    }

    /// <summary>
    /// L·∫•y t·ªëc ƒë·ªô xoay hi·ªán t·∫°i
    /// </summary>
    public float LayTocDoXoay()
    {
        return tocDoXoayCamera;
    }

    /// <summary>
    /// L·∫•y nh√¢n t·ªëc ƒë·ªô xoay nhanh
    /// </summary>
    public float LayNhanTocDoXoayNhanh()
    {
        return nhanTocDoXoayNhanh;
    }

    /// <summary>
    /// L·∫•y ƒë·ªô nh·∫°y chu·ªôt
    /// </summary>
    public float LayDoNhayChuot()
    {
        return doNhayChuot;
    }

    /// <summary>
    /// L·∫•y kho·∫£ng c√°ch hi·ªán t·∫°i
    /// </summary>
    public float LayKhoangCach()
    {
        return khoangCachHienTai;
    }

    /// <summary>
    /// X√≥a camera khi component b·ªã destroy
    /// </summary>
    private void OnDestroy()
    {
        if (npcCamera != null)
        {
            Destroy(npcCamera.gameObject);
        }
    }
}