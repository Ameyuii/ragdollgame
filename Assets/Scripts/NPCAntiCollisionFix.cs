using UnityEngine;
using UnityEngine.AI;

/// <summary>
/// Script fix to√†n di·ªán v·∫•n ƒë·ªÅ NPCs bay ra xa khi va ch·∫°m
/// Attach v√†o m·ªói NPC ƒë·ªÉ t·ª± ƒë·ªông kh·∫Øc ph·ª•c
/// </summary>
public class NPCAntiCollisionFix : MonoBehaviour
{
    [Header("Anti-Collision Settings")]
    [SerializeField, Tooltip("Kho·∫£ng c√°ch t·ªëi thi·ªÉu gi·ªØa c√°c NPCs")]
    private float minDistanceBetweenNPCs = 1.2f;
    
    [SerializeField, Tooltip("L·ª±c ƒë·∫©y nh·∫π ƒë·ªÉ t√°ch NPCs")]
    private float separationForce = 50f;
    
    [SerializeField, Tooltip("Gi·ªõi h·∫°n t·ªëc ƒë·ªô t·ªëi ƒëa")]
    private float maxVelocity = 3f;
    
    [SerializeField, Tooltip("Damping factor ƒë·ªÉ gi·∫£m t·ªëc")]
    private float velocityDamping = 0.95f;
    
    private Rigidbody rb;
    private NavMeshAgent navAgent;
    private NPCController npcController;
    private LayerMask npcLayerMask = -1; // T·∫•t c·∫£ layers
    
    void Start()
    {
        rb = GetComponent<Rigidbody>();
        navAgent = GetComponent<NavMeshAgent>();
        npcController = GetComponent<NPCController>();
        
        // C√†i ƒë·∫∑t Rigidbody an to√†n
        if (rb != null)
        {
            rb.mass = 60f; // Kh·ªëi l∆∞·ª£ng v·ª´a ph·∫£i
            rb.linearDamping = 3f; // Drag cao ƒë·ªÉ gi·∫£m t·ªëc nhanh
            rb.angularDamping = 8f; // Gi·∫£m xoay
            rb.interpolation = RigidbodyInterpolation.Interpolate; // Smooth movement
            rb.collisionDetectionMode = CollisionDetectionMode.ContinuousDynamic; // Tr√°nh clipping
        }
        
        // C√†i ƒë·∫∑t NavMeshAgent an to√†n
        if (navAgent != null)
        {
            navAgent.radius = 0.3f; // Radius nh·ªè
            navAgent.height = 1.8f;
            navAgent.stoppingDistance = 2f; // D·ª´ng xa h∆°n
            navAgent.obstacleAvoidanceType = ObstacleAvoidanceType.MedQualityObstacleAvoidance;
            navAgent.avoidancePriority = Random.Range(40, 60); // Priority kh√°c nhau
        }
        
        Debug.Log($"üõ°Ô∏è {gameObject.name}: NPCAntiCollisionFix ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t");
    }
      void FixedUpdate()
    {
        if (rb == null || npcController == null || npcController.IsDead()) return;
        
        // 1. GI·ªöI H·∫†N T·ªêC ƒê·ªò
        LimitVelocity();
        
        // 2. T√ÅCH NPCs KHI QU√Å G·∫¶N
        SeparateFromOtherNPCs();
        
        // 3. NGƒÇN BAY RA XA
        PreventFlyingAway();
    }
    
    void LimitVelocity()
    {
        if (rb.linearVelocity.magnitude > maxVelocity)
        {
            rb.linearVelocity = rb.linearVelocity.normalized * maxVelocity;
            Debug.Log($"‚ö° {gameObject.name}: Gi·ªõi h·∫°n t·ªëc ƒë·ªô ({maxVelocity})");
        }
        
        // Damping t·ª± nhi√™n
        rb.linearVelocity *= velocityDamping;
    }
    
    void SeparateFromOtherNPCs()
    {
        // T√¨m NPCs g·∫ßn
        Collider[] nearbyNPCs = Physics.OverlapSphere(transform.position, minDistanceBetweenNPCs, npcLayerMask);
        
        Vector3 separationVector = Vector3.zero;
        int npcCount = 0;
        
        foreach (Collider col in nearbyNPCs)
        {
            if (col.gameObject == gameObject) continue; // B·ªè qua ch√≠nh m√¨nh
              NPCController otherNPC = col.GetComponent<NPCController>();
            if (otherNPC == null || otherNPC.IsDead()) continue;
            
            // T√≠nh vector t√°ch
            Vector3 directionAway = transform.position - col.transform.position;
            float distance = directionAway.magnitude;
            
            if (distance < minDistanceBetweenNPCs && distance > 0.1f)
            {
                separationVector += directionAway.normalized / distance; // L·ª±c t·ªâ l·ªá ngh·ªãch v·ªõi kho·∫£ng c√°ch
                npcCount++;
            }
        }
        
        // √Åp d·ª•ng l·ª±c t√°ch nh·∫π
        if (npcCount > 0 && rb != null)
        {
            Vector3 separationForceVector = separationVector.normalized * separationForce;
            separationForceVector.y = 0; // Ch·ªâ t√°ch theo tr·ª•c X, Z
            
            rb.AddForce(separationForceVector, ForceMode.Acceleration);
            
            Debug.Log($"üö´ {gameObject.name}: T√°ch kh·ªèi {npcCount} NPCs g·∫ßn ({separationForceVector.magnitude:F1})");
        }
    }
    
    void PreventFlyingAway()
    {
        // N·∫øu NPC bay qu√° cao ho·∫∑c xa
        Vector3 groundPos = new Vector3(transform.position.x, 0, transform.position.z);
        float distanceFromGround = Vector3.Distance(transform.position, groundPos);
        
        if (distanceFromGround > 5f || transform.position.y > 10f)
        {
            // Reset v·ªÅ m·∫∑t ƒë·∫•t
            Vector3 safePosition = new Vector3(transform.position.x, 1f, transform.position.z);
            transform.position = safePosition;
            
            // Reset velocity
            if (rb != null)
            {
                rb.linearVelocity = Vector3.zero;
                rb.angularVelocity = Vector3.zero;
            }
            
            Debug.LogWarning($"üöÅ {gameObject.name}: RESET V·ªä TR√ç do bay qu√° xa!");
        }
    }
    
    // T·ª± ƒë·ªông th√™m component n√†y v√†o NPC n·∫øu ch∆∞a c√≥
    [System.Obsolete("Use QuickNPCAntiCollisionFix instead")]
    public static void AddToNPC(GameObject npcGameObject)
    {
        if (npcGameObject.GetComponent<NPCAntiCollisionFix>() == null)
        {
            npcGameObject.AddComponent<NPCAntiCollisionFix>();
            Debug.Log($"‚ûï ƒê√£ th√™m NPCAntiCollisionFix v√†o {npcGameObject.name}");
        }
    }
}
