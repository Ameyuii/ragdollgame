# Script PowerShell ƒë·ªÉ copy c·∫•u h√¨nh GitHub Copilot sang d·ª± √°n m·ªõi
# Ch·∫°y t·ª´ th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n ngu·ªìn

param(
    [Parameter(Mandatory=$true)]
    [string]$TargetProjectPath
)

Write-Host "üöÄ ƒêang copy c·∫•u h√¨nh GitHub Copilot..." -ForegroundColor Green

# Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n ƒë√≠ch
if (-not (Test-Path $TargetProjectPath)) {
    Write-Error "‚ùå ƒê∆∞·ªùng d·∫´n d·ª± √°n ƒë√≠ch kh√¥ng t·ªìn t·∫°i: $TargetProjectPath"
    exit 1
}

# T·∫°o th∆∞ m·ª•c .github n·∫øu ch∆∞a c√≥
$githubDir = Join-Path $TargetProjectPath ".github"
if (-not (Test-Path $githubDir)) {
    New-Item -ItemType Directory -Path $githubDir -Force
    Write-Host "‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c .github" -ForegroundColor Yellow
}

# Copy file copilot-instructions.md
$sourceInstructions = ".github\copilot-instructions.md"
$targetInstructions = Join-Path $githubDir "copilot-instructions.md"

if (Test-Path $sourceInstructions) {
    Copy-Item $sourceInstructions $targetInstructions -Force
    Write-Host "‚úÖ ƒê√£ copy copilot-instructions.md" -ForegroundColor Green
} else {
    Write-Warning "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file copilot-instructions.md"
}

# T·∫°o th∆∞ m·ª•c .vscode n·∫øu ch∆∞a c√≥
$vscodeDir = Join-Path $TargetProjectPath ".vscode"
if (-not (Test-Path $vscodeDir)) {
    New-Item -ItemType Directory -Path $vscodeDir -Force
    Write-Host "‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c .vscode" -ForegroundColor Yellow
}

# X·ª≠ l√Ω file settings.json (merge thay v√¨ overwrite)
$sourceSettings = ".vscode\settings.json"
$targetSettings = Join-Path $vscodeDir "settings.json"

if (Test-Path $sourceSettings) {
    if (Test-Path $targetSettings) {
        Write-Host "‚ö†Ô∏è File settings.json ƒë√£ t·ªìn t·∫°i. C·∫ßn merge th·ªß c√¥ng." -ForegroundColor Yellow
        Write-Host "   Ngu·ªìn: $sourceSettings"
        Write-Host "   ƒê√≠ch: $targetSettings"
        
        # T·∫°o backup
        $backupSettings = Join-Path $vscodeDir "settings.json.backup"
        Copy-Item $targetSettings $backupSettings -Force
        Write-Host "‚úÖ ƒê√£ backup settings.json c≈©" -ForegroundColor Cyan
    } else {
        Copy-Item $sourceSettings $targetSettings -Force
        Write-Host "‚úÖ ƒê√£ copy settings.json" -ForegroundColor Green
    }
} else {
    Write-Warning "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file settings.json"
}

# Copy file .editorconfig
$sourceEditorConfig = ".editorconfig"
$targetEditorConfig = Join-Path $TargetProjectPath ".editorconfig"

if (Test-Path $sourceEditorConfig) {
    if (Test-Path $targetEditorConfig) {
        Write-Host "‚ö†Ô∏è File .editorconfig ƒë√£ t·ªìn t·∫°i. C·∫ßn merge th·ªß c√¥ng." -ForegroundColor Yellow
        
        # T·∫°o backup
        $backupEditorConfig = Join-Path $TargetProjectPath ".editorconfig.backup"
        Copy-Item $targetEditorConfig $backupEditorConfig -Force
        Write-Host "‚úÖ ƒê√£ backup .editorconfig c≈©" -ForegroundColor Cyan
    } else {
        Copy-Item $sourceEditorConfig $targetEditorConfig -Force
        Write-Host "‚úÖ ƒê√£ copy .editorconfig" -ForegroundColor Green
    }
} else {
    Write-Warning "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file .editorconfig"
}

# Copy file README (t√πy ch·ªçn)
$sourceReadme = "COPILOT_SETUP_README.md"
$targetReadme = Join-Path $TargetProjectPath "COPILOT_SETUP_README.md"

if (Test-Path $sourceReadme) {
    Copy-Item $sourceReadme $targetReadme -Force
    Write-Host "‚úÖ ƒê√£ copy COPILOT_SETUP_README.md" -ForegroundColor Green
} else {
    Write-Warning "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file COPILOT_SETUP_README.md"
}

Write-Host ""
Write-Host "üéâ HO√ÄN TH√ÄNH! C·∫•u h√¨nh GitHub Copilot ƒë√£ ƒë∆∞·ª£c copy." -ForegroundColor Green
Write-Host ""
Write-Host "üìã B∆Ø·ªöC TI·∫æP THEO:" -ForegroundColor Cyan
Write-Host "1. M·ªü VS Code trong d·ª± √°n m·ªõi"
Write-Host "2. Restart VS Code ƒë·ªÉ √°p d·ª•ng settings"
Write-Host "3. Ki·ªÉm tra GitHub Copilot ho·∫°t ƒë·ªông"
Write-Host "4. Merge c√°c file settings n·∫øu c√≥ conflict"
Write-Host ""
Write-Host "üí° TIP: N·∫øu c√≥ file backup (.backup), h√£y merge th·ªß c√¥ng!" -ForegroundColor Yellow
